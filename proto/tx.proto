syntax = "proto3";
package tendermint.liquidity;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/coin.proto";

option go_package = "github.com/tendermint/liquidity/types";
//option (gogoproto.goproto_getters_all) = false;

//option (gogoproto.goproto_stringer_all) = false;
//option (gogoproto.stringer_all)         = false;

// Msg defines the staking Msg service.
service Msg {
  // Submit create liquidity pool message
  rpc CreateLiquidityPool(MsgCreateLiquidityPool) returns (MsgCreateLiquidityPoolResponse) {
    option (google.api.http) = {
      post: "/liquidity/pools"
      body: "*"
    };
  };

  // Submit deposit to the liquidity pool batch
  rpc DepositToLiquidityPool(MsgDepositToLiquidityPool) returns (MsgDepositToLiquidityPoolResponse) {
    option (google.api.http) = {
      post: "/liquidity/pools/{pool_id}/batch/deposits"
      body: "*"
    };
  };

  // Submit withdraw from to the liquidity pool batch
  rpc WithdrawFromLiquidityPool(MsgWithdrawFromLiquidityPool) returns (MsgWithdrawFromLiquidityPoolResponse) {
    option (google.api.http) = {
      post: "/liquidity/pools/{pool_id}/batch/withdraws"
      body: "*"
    };
  };

  // Submit swap to the liquidity pool batch
  rpc Swap(MsgSwap) returns (MsgSwapResponse) {
    option (google.api.http) = {
      post: "/liquidity/pools/{pool_id}/batch/swaps"
      body: "*"
    };
  };
}

message MsgCreateLiquidityPool {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string pool_creator_address = 1 [(gogoproto.moretags) = "yaml:\"pool_creator_address\""];
  uint32 pool_type_index = 2 [(gogoproto.moretags) = "yaml:\"pool_type_index\""];
  repeated string reserve_coin_denoms = 3 [(gogoproto.moretags) = "yaml:\"reserve_coin_denoms\""];
  repeated cosmos.base.v1beta1.Coin deposit_coins = 4 [(gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"deposit_coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgCreateLiquidityPoolRequest {
  BaseReq base_req = 1;
  MsgCreateLiquidityPool msg = 2;
}

message MsgCreateLiquidityPoolResponse {
  StdTx std_tx = 1 [(gogoproto.moretags) = "yaml:\"std_tx\""];
}

message MsgDepositToLiquidityPool {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string depositor_address = 1 [(gogoproto.moretags) = "yaml:\"depositor_address\""];
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
  repeated cosmos.base.v1beta1.Coin deposit_coins = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"deposit_coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgDepositToLiquidityPoolRequest {
  BaseReq base_req = 1;
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
  MsgDepositToLiquidityPool msg = 3;
}

message MsgDepositToLiquidityPoolResponse {
  StdTx std_tx = 1 [(gogoproto.moretags) = "yaml:\"std_tx\""];
}

message MsgWithdrawFromLiquidityPool {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string withdrawer_address = 1 [ (gogoproto.moretags) = "yaml:\"withdrawer_address\""];
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
  cosmos.base.v1beta1.Coin pool_coin = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"pool_coin\""
  ];
}

message MsgWithdrawFromLiquidityPoolRequest {
  BaseReq base_req = 1;
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
  MsgWithdrawFromLiquidityPool msg = 3;
}

message MsgWithdrawFromLiquidityPoolResponse {
  StdTx std_tx = 1 [(gogoproto.moretags) = "yaml:\"std_tx\""];
}

message MsgSwap {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string swap_requester_address = 1 [(gogoproto.moretags) = "yaml:\"swap_requester_address\""];
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
  uint32 pool_type_index = 3 [(gogoproto.moretags) = "yaml:\"pool_type_index\""];
  uint32 swap_type = 4 [(gogoproto.moretags) = "yaml:\"swap_type\""];

  cosmos.base.v1beta1.Coin offer_coin = 5 [
     (gogoproto.nullable)     = false,
     (gogoproto.moretags)     = "yaml:\"offer_coin\""
  ];

  string demand_coin_denom = 6 [(gogoproto.moretags) = "yaml:\"demand_coin_denom\""];

  bytes order_price = 7 [
    (gogoproto.moretags)   = "yaml:\"order_price\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

message MsgSwapRequest {
  BaseReq base_req = 1;
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
  MsgSwap msg = 3;
}

message MsgSwapResponse {
  StdTx std_tx = 1 [(gogoproto.moretags) = "yaml:\"std_tx\""];
}

message BaseReq {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string from = 1 [(gogoproto.moretags) = "yaml:\"from\""];
  string memo = 2 [(gogoproto.moretags) = "yaml:\"memo\""];
  string chain_id = 3 [(gogoproto.moretags) = "yaml:\"chain_id\""];
  uint64 account_number = 4 [(gogoproto.moretags) = "yaml:\"account_number\""];
  uint64 sequence = 5 [(gogoproto.moretags) = "yaml:\"sequence\""];
  uint64 timeout_height = 6 [(gogoproto.moretags) = "yaml:\"timeout_height\""];
  repeated cosmos.base.v1beta1.Coin fees = 7
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  repeated cosmos.base.v1beta1.DecCoin gas_prices = 8 [
    (gogoproto.moretags)     = "yaml:\"gas_prices\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable)     = false
  ];
  uint64 gas = 9 [(gogoproto.moretags) = "yaml:\"gas\""];
  string gas_adjustment = 10 [(gogoproto.moretags) = "yaml:\"gas_adjustment\""];
  bool simulate = 11 [(gogoproto.moretags) = "yaml:\"simulate\""];
}


message Fee {
  uint64 gas = 1;

  // amount is the amount of coins to be paid as a fee
  repeated cosmos.base.v1beta1.Coin amount = 2
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message PubKey {
  string type = 1 [(gogoproto.moretags) = "yaml:\"type\""];
  string value = 2 [(gogoproto.moretags) = "yaml:\"value\""];
}

message Signature {
  string signature = 1 [(gogoproto.moretags) = "yaml:\"signature\""];
  PubKey pub_key = 2 [(gogoproto.moretags) = "yaml:\"pub_key\""];
  uint64 account_number = 3 [(gogoproto.moretags) = "yaml:\"account_number\""];
  uint64 sequence = 4 [(gogoproto.moretags) = "yaml:\"sequence\""];
}

message StdTx {
  repeated string msg = 1 [(gogoproto.moretags) = "yaml:\"msg\""];
  Fee fee = 2 [(gogoproto.moretags) = "yaml:\"fee\""];
  string memo = 3 [(gogoproto.moretags) = "yaml:\"memo\""];
  Signature signature = 4 [(gogoproto.moretags) = "yaml:\"signature\""];
}