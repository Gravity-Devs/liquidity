syntax = "proto3";
package tendermint.liquidity;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/coin.proto";

option go_package = "github.com/tendermint/liquidity/types";
//option (gogoproto.goproto_getters_all) = false;

//option (gogoproto.goproto_stringer_all) = false;
//option (gogoproto.stringer_all)         = false;

// Msg defines the staking Msg service.
service Msg {
  rpc CreateLiquidityPool(MsgCreateLiquidityPoolRequest) returns (MsgCreateLiquidityPoolResponse) {
    option (google.api.http) = {
      post: "/liquidity/pools"
      body: "msg"
    };
  };

  rpc DepositToLiquidityPool(MsgDepositToLiquidityPoolRequest) returns (MsgDepositToLiquidityPoolResponse) {
    option (google.api.http) = {
      post: "/liquidity/pools/{pool_id}/batch/deposits"
      body: "msg"
    };
  };

  rpc WithdrawFromLiquidityPool(MsgWithdrawFromLiquidityPoolRequest) returns (MsgWithdrawFromLiquidityPoolResponse) {
    option (google.api.http) = {
      post: "/liquidity/pools/{pool_id}/batch/withdraws"
      body: "msg"
    };
  };

  rpc Swap(MsgSwapRequest) returns (MsgSwapResponse) {
    option (google.api.http) = {
      post: "/liquidity/pools/{pool_id}/batch/swaps"
      body: "msg"
    };
  };
}

message MsgCreateLiquidityPool {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  bytes pool_creator = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "yaml:\"pool_creator\""];
  uint32 pool_type_index = 2 [(gogoproto.moretags) = "yaml:\"pool_type_index\""];
  repeated string reserve_coin_denoms = 3 [(gogoproto.moretags) = "yaml:\"reserve_coin_denoms\""];
  repeated cosmos.base.v1beta1.Coin deposit_coins = 4 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"deposit_coins\""];
}

message MsgCreateLiquidityPoolRequest {
    MsgCreateLiquidityPool msg = 1;
}

message MsgCreateLiquidityPoolResponse { }

message MsgDepositToLiquidityPool {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  bytes depositor = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "yaml:\"depositor\""];
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
  repeated cosmos.base.v1beta1.Coin deposit_coins = 3 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"deposit_coins\""];
}

message MsgDepositToLiquidityPoolRequest {
  MsgDepositToLiquidityPool msg = 1;
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
}

message MsgDepositToLiquidityPoolResponse { }

message MsgWithdrawFromLiquidityPool {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  bytes withdrawer = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "yaml:\"withdrawer\""];
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
  repeated cosmos.base.v1beta1.Coin pool_coin = 3 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"pool_coin\""];
}

message MsgWithdrawFromLiquidityPoolRequest {
  MsgWithdrawFromLiquidityPool msg = 1;
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
}

message MsgWithdrawFromLiquidityPoolResponse { }

message MsgSwap {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  bytes swap_requester = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "yaml:\"swap_requester\""];
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
  uint32 pool_type_index = 3 [(gogoproto.moretags) = "yaml:\"pool_type_index\""];
  uint32 swap_type = 4 [(gogoproto.moretags) = "yaml:\"swap_type\""];

  cosmos.base.v1beta1.Coin offer_coin = 5 [
     (gogoproto.nullable)     = false,
     (gogoproto.moretags)     = "yaml:\"offer_coin\""
  ];

  string demandCoinDenom = 6 [(gogoproto.moretags) = "yaml:\"demand_coin_denom\""];

  bytes order_price = 7 [
    (gogoproto.moretags)   = "yaml:\"order_price\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

message MsgSwapRequest {
  MsgSwap msg = 1;
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
}

message MsgSwapResponse { }