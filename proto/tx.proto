syntax = "proto3";
package tendermint.liquidity;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/coin.proto";

option go_package = "github.com/tendermint/liquidity/types";
//option (gogoproto.goproto_getters_all) = false;

//option (gogoproto.goproto_stringer_all) = false;
//option (gogoproto.stringer_all)         = false;

// Msg defines the liquidity Msg service.
service Msg {

  // Submit create liquidity pool message.
  rpc CreateLiquidityPool(MsgCreateLiquidityPool) returns (MsgCreateLiquidityPoolResponse) {
    option (google.api.http) = {
      post: "/liquidity/pools"
      body: "*"
    };
  };

  // Submit deposit to the liquidity pool batch.
  rpc DepositToLiquidityPool(MsgDepositToLiquidityPool) returns (MsgDepositToLiquidityPoolResponse) {
    option (google.api.http) = {
      post: "/liquidity/pools/{pool_id}/batch/deposits"
      body: "*"
    };
  };

  // Submit withdraw from to the liquidity pool batch.
  rpc WithdrawFromLiquidityPool(MsgWithdrawFromLiquidityPool) returns (MsgWithdrawFromLiquidityPoolResponse) {
    option (google.api.http) = {
      post: "/liquidity/pools/{pool_id}/batch/withdraws"
      body: "*"
    };
  };

  // Submit swap to the liquidity pool batch.
  rpc Swap(MsgSwap) returns (MsgSwapResponse) {
    option (google.api.http) = {
      post: "/liquidity/pools/{pool_id}/batch/swaps"
      body: "*"
    };
  };
}

// MsgCreateLiquidityPool defines an sdk.Msg type that supports submitting create liquidity pool
message MsgCreateLiquidityPool {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string pool_creator_address = 1 [(gogoproto.moretags) = "yaml:\"pool_creator_address\""];
  uint32 pool_type_index = 2 [(gogoproto.moretags) = "yaml:\"pool_type_index\""];
  repeated string reserve_coin_denoms = 3 [(gogoproto.moretags) = "yaml:\"reserve_coin_denoms\""];
  repeated cosmos.base.v1beta1.Coin deposit_coins = 4 [(gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"deposit_coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgCreateLiquidityPoolRequest is the request type for the Query/Deposits RPC method
// with the specified pool-type-index, deposit coins for reserve
// Currently, only the default pool-type-index 1 is available on this version
// the number of deposit coins must be two in the pool-type-index 1.
message MsgCreateLiquidityPoolRequest {
  BaseReq base_req = 1;
  MsgCreateLiquidityPool msg = 2;
}

// MsgCreateLiquidityPoolResponse defines the Msg/CreateLiquidityPool response type.
message MsgCreateLiquidityPoolResponse {
  StdTx std_tx = 1 [(gogoproto.moretags) = "yaml:\"std_tx\""];
}

// MsgDepositToLiquidityPool defines an sdk.Msg type that supports submitting deposit request to the batch of the liquidity pool
// Deposit submit to the batch of the Liquidity pool with the specified pool-id, deposit coins for reserve
// this requests are stacked in the batch of the liquidity pool, not immediately processed and
// processed in the endblock at once with other requests.
message MsgDepositToLiquidityPool {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string depositor_address = 1 [(gogoproto.moretags) = "yaml:\"depositor_address\""];
  // id of target pool
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
  repeated cosmos.base.v1beta1.Coin deposit_coins = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"deposit_coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgDepositToLiquidityPoolRequest is the request type for the Msg/DepositToLiquidityPool RPC method.
message MsgDepositToLiquidityPoolRequest {
  BaseReq base_req = 1;
  // id of target pool
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
  MsgDepositToLiquidityPool msg = 3;
}

// MsgDepositToLiquidityPoolResponse defines the Msg/DepositToLiquidityPool response type.
message MsgDepositToLiquidityPoolResponse {
  StdTx std_tx = 1 [(gogoproto.moretags) = "yaml:\"std_tx\""];
}

// MsgWithdrawFromLiquidityPool defines an sdk.Msg type that supports submitting withdraw request to the batch of the liquidity pool
// Withdraw submit to the batch from the Liquidity pool with the specified pool-id, pool-coin of the pool
// this requests are stacked in the batch of the liquidity pool, not immediately processed and
// processed in the endblock at once with other requests.
message MsgWithdrawFromLiquidityPool {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string withdrawer_address = 1 [ (gogoproto.moretags) = "yaml:\"withdrawer_address\""];
  // id of target pool
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
  cosmos.base.v1beta1.Coin pool_coin = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"pool_coin\""
  ];
}

// MsgWithdrawFromLiquidityPoolRequest is the request type for the Query/WithdrawFromLiquidityPool RPC method.
message MsgWithdrawFromLiquidityPoolRequest {
  BaseReq base_req = 1;
  // id of target pool
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
  MsgWithdrawFromLiquidityPool msg = 3;
}

// MsgWithdrawFromLiquidityPoolResponse defines the Msg/WithdrawFromLiquidityPool response type.
message MsgWithdrawFromLiquidityPoolResponse {
  StdTx std_tx = 1 [(gogoproto.moretags) = "yaml:\"std_tx\""];
}

// MsgSwap defines an sdk.Msg type that supports submitting swap offer request to the batch of the liquidity pool
// Swap offer to the Liquidity pool with the specified pool-id, pool-type-index, swap-type,
// demand-coin-denom with the coin and the price you're offering
// this requests are stacked in the batch of the liquidity pool, not immediately processed and
// processed in the endblock at once with other requests
// You should request the same each field as the pool
// Currently, only the default swap-type 1 is available on this version
// The detailed swap algorithm can be found here
// https://github.com/tendermint/liquidity .
message MsgSwap {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;
  // address of swap requester
  string swap_requester_address = 1 [(gogoproto.moretags) = "yaml:\"swap_requester_address\""];
  // id of target pool
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
  // index of target pool type, only 1 is allowed on this version, Must match the value in the pool.
  uint32 pool_type_index = 3 [(gogoproto.moretags) = "yaml:\"pool_type_index\""];
  // id of swap type type, only 1 is allowed on this version, Must match the value in the pool.
  uint32 swap_type = 4 [(gogoproto.moretags) = "yaml:\"swap_type\""];

  // offer sdk.coin for the swap request, Must match the denom in the pool.
  cosmos.base.v1beta1.Coin offer_coin = 5 [
     (gogoproto.nullable)     = false,
     (gogoproto.moretags)     = "yaml:\"offer_coin\""
  ];

  // denom of demand coin to be exchanged on the swap request, Must match the denom in the pool.
  string demand_coin_denom = 6 [(gogoproto.moretags) = "yaml:\"demand_coin_denom\""];

  // limit order price for this offer
  bytes order_price = 7 [
    (gogoproto.moretags)   = "yaml:\"order_price\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// MsgSwapRequest is the request type for the Query/Swap RPC method.
message MsgSwapRequest {
  BaseReq base_req = 1;
  // id of target pool
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
  MsgSwap msg = 3;
}

// MsgSwapResponse defines the Msg/Swap response type.
message MsgSwapResponse {
  StdTx std_tx = 1 [(gogoproto.moretags) = "yaml:\"std_tx\""];
}

// Base Request struct for Post Tx, standard of tendermint/cosmos-sdk
message BaseReq {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // Sender address or Keybase name to generate a transaction
  string from = 1 [(gogoproto.moretags) = "yaml:\"from\""];
  // example: Sent via Cosmos Voyager
  string memo = 2 [(gogoproto.moretags) = "yaml:\"memo\""];
  // example: Cosmos-Hub
  string chain_id = 3 [(gogoproto.moretags) = "yaml:\"chain_id\""];
  // example: 0
  uint64 account_number = 4 [(gogoproto.moretags) = "yaml:\"account_number\""];
  uint64 sequence = 5 [(gogoproto.moretags) = "yaml:\"sequence\""];
  uint64 timeout_height = 6 [(gogoproto.moretags) = "yaml:\"timeout_height\""];
  repeated cosmos.base.v1beta1.Coin fees = 7
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  repeated cosmos.base.v1beta1.DecCoin gas_prices = 8 [
    (gogoproto.moretags)     = "yaml:\"gas_prices\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable)     = false
  ];
  // example: 200000
  uint64 gas = 9 [(gogoproto.moretags) = "yaml:\"gas\""];
  // example: 1.2
  string gas_adjustment = 10 [(gogoproto.moretags) = "yaml:\"gas_adjustment\""];
  // Estimate gas for a transaction (cannot be used in conjunction with generate_only)
  // example: false
  bool simulate = 11 [(gogoproto.moretags) = "yaml:\"simulate\""];
}

// Fee struct of cosmos-sdk
message Fee {
  uint64 gas = 1;
  // amount is the amount of coins to be paid as a fee
  repeated cosmos.base.v1beta1.Coin amount = 2
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// PubKey struct of tendermint/cosmos-sdk
message PubKey {
  // example: tendermint/PubKeySecp256k1
  string type = 1 [(gogoproto.moretags) = "yaml:\"type\""];
  // example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
  string value = 2 [(gogoproto.moretags) = "yaml:\"value\""];
}

// signature struct of tendermint/cosmos-sdk
message Signature {
  // example: MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
  string signature = 1 [(gogoproto.moretags) = "yaml:\"signature\""];
  PubKey pub_key = 2 [(gogoproto.moretags) = "yaml:\"pub_key\""];
  // example: 0
  uint64 account_number = 3 [(gogoproto.moretags) = "yaml:\"account_number\""];
  // example: 0
  uint64 sequence = 4 [(gogoproto.moretags) = "yaml:\"sequence\""];
}

// Base response struct of result of the requested Tx, standard of tendermint/cosmos-sdk
message StdTx {
  repeated string msg = 1 [(gogoproto.moretags) = "yaml:\"msg\""];
  Fee fee = 2 [(gogoproto.moretags) = "yaml:\"fee\""];
  string memo = 3 [(gogoproto.moretags) = "yaml:\"memo\""];
  Signature signature = 4 [(gogoproto.moretags) = "yaml:\"signature\""];
}