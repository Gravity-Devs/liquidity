syntax = "proto3";
package tendermint.liquidity.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos_proto/coin.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/tendermint/liquidity/x/liquidity/types";
//option (gogoproto.goproto_getters_all) = false;

//option (gogoproto.goproto_stringer_all) = false;
//option (gogoproto.stringer_all)         = false;

// Msg defines the liquidity Msg service.
service Msg {

  // Submit create liquidity pool message.
  rpc CreatePool(MsgCreatePool) returns (MsgCreatePoolResponse);

  // Submit deposit to the liquidity pool batch.
  rpc DepositWithinBatch(MsgDepositWithinBatch) returns (MsgDepositWithinBatchResponse);

  // Submit withdraw from to the liquidity pool batch.
  rpc WithdrawWithinBatch(MsgWithdrawWithinBatch) returns (MsgWithdrawWithinBatchResponse);

  // Submit swap to the liquidity pool batch.
  rpc Swap(MsgSwapWithinBatch) returns (MsgSwapWithinBatchResponse);
}

// MsgCreatePool defines an sdk.Msg type that supports submitting create liquidity pool
//
// See: https://github.com/tendermint/liquidity/blob/develop/x/liquidity/spec/04_messages.md
message MsgCreatePool {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string pool_creator_address = 1 [(gogoproto.moretags) = "yaml:\"pool_creator_address\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "account address of the origin of this message",
      example: "\"cosmos1e35y69rhrt7y4yce5l5u73sjnxu0l33wvznyun\"",
      format: "sdk.AccAddress"
    }];

  // id of target pool type, only 1 is allowed on this version, Must match the value in the pool.
  uint32 pool_type_id = 2 [(gogoproto.moretags) = "yaml:\"pool_type_id\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"1\"",
      format: "uint32"
  }];

  // reserve coin pair of the pool to deposit
  repeated cosmos.base.v1beta1.Coin deposit_coins = 4 [(gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"deposit_coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "[{\"denom\": \"denomX\", \"amount\": \"1000000\"}, {\"denom\": \"denomY\", \"amount\": \"2000000\"}]",
      format: "sdk.Coins"
    }];
}

// MsgCreatePoolResponse defines the Msg/CreatePool response type.
message MsgCreatePoolResponse {}

// `MsgDepositWithinBatch defines` an `sdk.Msg` type that supports submitting deposit request to the batch of the liquidity pool
// Deposit submit to the batch of the Liquidity pool with the specified `pool_id`, `deposit_coins` for reserve
// this requests are stacked in the batch of the liquidity pool, not immediately processed and
// processed in the `endblock` at once with other requests.
//
// See: https://github.com/tendermint/liquidity/blob/develop/x/liquidity/spec/04_messages.md
message MsgDepositWithinBatch {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string depositor_address = 1 [(gogoproto.moretags) = "yaml:\"depositor_address\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "account address of the origin of this message",
      example: "\"cosmos1e35y69rhrt7y4yce5l5u73sjnxu0l33wvznyun\"",
      format: "sdk.AccAddress"
    }];

  // id of the target pool
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"1\"",
      format: "uint64"
    }];

  // reserve coin pair of the pool to deposit
  repeated cosmos.base.v1beta1.Coin deposit_coins = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"deposit_coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "[{\"denom\": \"denomX\", \"amount\": \"1000000\"}, {\"denom\": \"denomY\", \"amount\": \"2000000\"}]",
      format: "sdk.Coins"
    }];

}

// MsgDepositWithinBatchResponse defines the Msg/DepositWithinBatch response type.
message MsgDepositWithinBatchResponse {}

// `MsgWithdrawWithinBatch` defines an `sdk.Msg` type that supports submitting withdraw request to the batch of the liquidity pool
// Withdraw submit to the batch from the Liquidity pool with the specified `pool_id`, `pool_coin` of the pool
// this requests are stacked in the batch of the liquidity pool, not immediately processed and
// processed in the `endblock` at once with other requests.
//
// See: https://github.com/tendermint/liquidity/blob/develop/x/liquidity/spec/04_messages.md
message MsgWithdrawWithinBatch {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string withdrawer_address = 1 [ (gogoproto.moretags) = "yaml:\"withdrawer_address\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "account address of the origin of this message",
      example: "\"cosmos1e35y69rhrt7y4yce5l5u73sjnxu0l33wvznyun\"",
      format: "sdk.AccAddress"
    }];
  // id of the target pool
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"1\"",
      format: "uint64"
    }];
  cosmos.base.v1beta1.Coin pool_coin = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"pool_coin\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "{\"denom\": \"poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4\", \"amount\": \"1000\"}",
      format: "sdk.Coin"
    }];
}

// MsgWithdrawWithinBatchResponse defines the Msg/WithdrawWithinBatch response type.
message MsgWithdrawWithinBatchResponse {}

// `MsgSwapWithinBatch` defines an sdk.Msg type that supports submitting swap offer request to the batch of the liquidity pool
// Swap offer submit to the batch to the Liquidity pool with the specified the `pool_id`, `swap_type_id`,
// `demand_coin_denom` with the coin and the price you're offering
// and `offer_coin_fee` must half of offer coin amount * current `params.swap_fee_rate` for reservation to pay fees
// this requests are stacked in the batch of the liquidity pool, not immediately processed and
// processed in the `endblock` at once with other requests
// You should request the same each field as the pool
// Currently, only the default `swap_type_id`1 is available on this version
// The detailed swap algorithm can be found here.
//
// See: https://github.com/tendermint/liquidity/tree/develop/doc
// https://github.com/tendermint/liquidity/blob/develop/x/liquidity/spec/04_messages.md
message MsgSwapWithinBatch {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;
  // address of swap requester
  string swap_requester_address = 1 [(gogoproto.moretags) = "yaml:\"swap_requester_address\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "account address of the origin of this message",
      example: "\"cosmos1e35y69rhrt7y4yce5l5u73sjnxu0l33wvznyun\"",
      format: "sdk.AccAddress"
    }];
  // id of the target pool
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"1\"",
      format: "uint64"
    }];

  // id of swap type, only 1 is allowed on this version, Must match the value in the pool.
  uint32 swap_type_id = 3 [(gogoproto.moretags) = "yaml:\"swap_type_id\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"1\"",
      format: "uint32"
    }];

  // offer sdk.coin for the swap request, Must match the denom in the pool.
  cosmos.base.v1beta1.Coin offer_coin = 4 [
    (gogoproto.nullable)     = false,
    (gogoproto.moretags)     = "yaml:\"offer_coin\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "{\"denom\": \"denomX\", \"amount\": \"1000000\"}",
      format: "sdk.Coin"
    }];

  // denom of demand coin to be exchanged on the swap request, Must match the denom in the pool.
  string demand_coin_denom = 5 [(gogoproto.moretags) = "yaml:\"demand_coin_denom\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"denomB\"",
    }];

  // half of offer coin amount * params.swap_fee_rate for reservation to pay fees
  cosmos.base.v1beta1.Coin offer_coin_fee = 6 [
    (gogoproto.nullable)     = false,
    (gogoproto.moretags)     = "yaml:\"offer_coin_fee\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "{\"denom\": \"denomX\", \"amount\": \"5000\"}",
      format: "sdk.Coin"
      }
  ];

  // limit order price for the order, the price is the exchange ratio of X/Y where X is the amount of the first coin and
  // Y is the amount of the second coin when their denoms are sorted alphabetically
  string order_price = 7 [
    (gogoproto.moretags)   = "yaml:\"order_price\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"1.1\"",
      format: "sdk.Dec"
    }];
}

// MsgSwapWithinBatchResponse defines the Msg/Swap response type.
message MsgSwapWithinBatchResponse {}