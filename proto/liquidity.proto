syntax = "proto3";
package tendermint.liquidity;

import "tx.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/coin.proto";

option go_package = "github.com/tendermint/liquidity/types";
option (gogoproto.goproto_getters_all) = false;

message LiquidityPoolType {
    option (gogoproto.equal) = true;
    uint32 pool_type_index = 1 [(gogoproto.moretags) = "yaml:\"pool_type_index\""];
    string name = 2 [(gogoproto.moretags) = "yaml:\"name\""];
    uint32 min_reserve_coin_num = 3 [(gogoproto.moretags) = "yaml:\"min_reserve_coin_num\""];
    uint32 max_reserve_coin_num = 4 [(gogoproto.moretags) = "yaml:\"max_reserve_coin_num\""];
    string description = 5 [(gogoproto.moretags) = "yaml:\"description\""];
}

message Params {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = false;

    repeated LiquidityPoolType liquidity_pool_types = 1 [
        (gogoproto.moretags) = "yaml:\"liquidity_pool_types\"",
        (gogoproto.nullable) = false
    ];
    string min_init_deposit_to_pool = 2 [
        (gogoproto.moretags)   = "yaml:\"min_init_deposit_to_pool\"",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
        (gogoproto.nullable)   = false
    ];
    string init_pool_coin_mint_amount = 3 [
        (gogoproto.moretags)   = "yaml:\"init_pool_coin_mint_amount\"",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
        (gogoproto.nullable)   = false
    ];
    bytes swap_fee_rate = 4 [
        (gogoproto.moretags)   = "yaml:\"swap_fee_rate\"",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
    ];
    repeated cosmos.base.v1beta1.Coin liquidity_pool_creation_fee = 5 [
        (gogoproto.moretags)   = "yaml:\"liquidity_pool_creation_fee\"",
        (gogoproto.nullable)   = false,
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
    ];
}

message LiquidityPool {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = true;

    uint64 pool_id = 1 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
    uint32 pool_type_index = 2 [(gogoproto.moretags) = "yaml:\"pool_type_index\""];
    repeated string reserve_coin_denoms = 3 [(gogoproto.moretags) = "yaml:\"reserve_coin_denoms\""];
    string reserve_account_address = 4 [(gogoproto.moretags) = "yaml:\"reserve_account_address\""];
    string pool_coin_denom = 5 [(gogoproto.moretags) = "yaml:\"pool_coin_denom\""];
}

message LiquidityPoolMetaData {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = true;

    uint64 pool_id = 1 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
    cosmos.base.v1beta1.Coin pool_coin_total_supply = 2 [
        (gogoproto.moretags)   = "yaml:\"pool_coin_total_supply\"",
        (gogoproto.nullable)   = false
    ];
    repeated cosmos.base.v1beta1.Coin reserve_coins = 3 [
        (gogoproto.moretags)   = "yaml:\"reserve_coins\"",
        (gogoproto.nullable)   = false,
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
    ];
}

message LiquidityPoolBatch {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = true;

    uint64 pool_id = 1 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id"];
    uint64 batch_index = 2 [(gogoproto.moretags) = "yaml:\"batch_index\""];
    int64 begin_height = 3 [(gogoproto.moretags) = "yaml:\"begin_height\""];
    uint64 deposit_msg_index = 4 [(gogoproto.moretags) = "yaml:\"deposit_msg_index\""];
    uint64 withdraw_msg_index = 5 [(gogoproto.moretags) = "yaml:\"withdraw_msg_index\""];
    uint64 swap_msg_index = 6 [(gogoproto.moretags) = "yaml:\"swap_msg_index\""];
    bool executed = 7 [(gogoproto.moretags) = "yaml:\"executed\""];
}

message BatchPoolDepositMsg {
    int64 msg_height = 1 [(gogoproto.moretags) = "yaml:\"msg_height\""];
    uint64 msg_index = 2 [(gogoproto.moretags) = "yaml:\"msg_index\""];
    bool executed = 3 [(gogoproto.moretags) = "yaml:\"executed\""];
    bool succeed = 4 [(gogoproto.moretags) = "yaml:\"succeed\""];
    bool to_delete = 5 [(gogoproto.moretags) = "yaml:\"to_delete\""];
    MsgDepositToLiquidityPool Msg = 6 [(gogoproto.moretags) = "yaml:\"msg\""];
}

message BatchPoolWithdrawMsg {
    int64 msg_height = 1 [(gogoproto.moretags) = "yaml:\"msg_height\""];
    uint64 msg_index = 2 [(gogoproto.moretags) = "yaml:\"msg_index\""];
    bool executed = 3 [(gogoproto.moretags) = "yaml:\"executed\""];
    bool succeed = 4 [(gogoproto.moretags) = "yaml:\"succeed\""];
    bool to_delete = 5 [(gogoproto.moretags) = "yaml:\"to_delete\""];
    MsgWithdrawFromLiquidityPool msg = 6 [(gogoproto.moretags) = "yaml:\"msg\""];
}

message BatchPoolSwapMsg {
    int64 msg_height = 1 [(gogoproto.moretags) = "yaml:\"msg_height\""];
    uint64 msg_index = 2 [(gogoproto.moretags) = "yaml:\"msg_index\""];
    bool executed = 3 [(gogoproto.moretags) = "yaml:\"executed\""];
    bool succeed = 4 [(gogoproto.moretags) = "yaml:\"succeed\""];
    bool to_delete = 5 [(gogoproto.moretags) = "yaml:\"to_delete\""];
    int64 order_expiry_height = 6 [(gogoproto.moretags) = "yaml:\"order_expiry_height\""];
    cosmos.base.v1beta1.Coin exchanged_offer_coin = 7 [
        (gogoproto.nullable)     = false,
        (gogoproto.moretags)     = "yaml:\"exchanged_offer_coin\""
    ];
    cosmos.base.v1beta1.Coin remaining_offer_coin = 8 [
        (gogoproto.nullable)     = false,
        (gogoproto.moretags)     = "yaml:\"remaining_offer_coin\""
    ];
    MsgSwap msg = 9 [(gogoproto.moretags) = "yaml:\"msg\""];
}
