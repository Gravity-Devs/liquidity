// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("msg.proto", fileDescriptor_c06e4cca6c2cc899) }

var fileDescriptor_c06e4cca6c2cc899 = []byte{
	// 752 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x97, 0xcf, 0x6b, 0x24, 0x45,
	0x14, 0xc7, 0x33, 0x61, 0x13, 0x75, 0x4e, 0x12, 0xfc, 0x81, 0x61, 0x19, 0x1e, 0x83, 0x2b, 0xb8,
	0xce, 0x4c, 0x91, 0x8d, 0xb8, 0x98, 0x8b, 0x8c, 0xeb, 0xaf, 0x83, 0xbb, 0x86, 0x4d, 0x40, 0xf0,
	0x22, 0xd5, 0x5d, 0x6f, 0xaa, 0x0b, 0xbb, 0xeb, 0xd5, 0xd6, 0x7b, 0x9d, 0x99, 0x41, 0x04, 0xf1,
	0xe4, 0x51, 0xf4, 0xef, 0xf0, 0xec, 0xc1, 0xb3, 0xe0, 0x71, 0x41, 0x10, 0x0f, 0x1e, 0x96, 0xc4,
	0xa3, 0xa0, 0x7f, 0x81, 0x48, 0x77, 0x4f, 0xef, 0x8e, 0x6e, 0x42, 0xc8, 0xe6, 0x3a, 0xa7, 0x1a,
	0x6a, 0xea, 0xfb, 0x7d, 0x5f, 0x1e, 0x9f, 0xef, 0xa1, 0xbb, 0xcf, 0x14, 0x6c, 0x47, 0x21, 0x92,
	0xd0, 0xd6, 0x73, 0x82, 0xde, 0x60, 0x2c, 0x9c, 0x97, 0x51, 0xee, 0xee, 0x95, 0xce, 0x38, 0x99,
	0x6f, 0x5f, 0xb5, 0x44, 0x36, 0x47, 0xa5, 0x83, 0x53, 0xda, 0x7b, 0x12, 0x2d, 0x8e, 0x3c, 0x37,
	0x9a, 0xed, 0xe6, 0x48, 0x87, 0x16, 0xfd, 0x90, 0x02, 0x7a, 0x1d, 0xdc, 0xd1, 0x0d, 0x45, 0xa1,
	0x7e, 0x73, 0xca, 0xfb, 0xa7, 0x65, 0xd6, 0xfc, 0xba, 0xf1, 0xe3, 0x8b, 0xdd, 0xcd, 0xdb, 0x6c,
	0xc7, 0xc1, 0x6d, 0xfd, 0xbe, 0xd1, 0x7d, 0xe1, 0x56, 0x44, 0x2d, 0xf8, 0x61, 0x3b, 0x76, 0x9f,
	0x28, 0xaf, 0xfe, 0xda, 0x1d, 0x9d, 0x16, 0x6a, 0x74, 0x9b, 0xed, 0x29, 0x82, 0xbb, 0x78, 0xaf,
	0x44, 0x96, 0xed, 0xd7, 0x2f, 0x26, 0xe2, 0x40, 0x9e, 0xb1, 0xff, 0xeb, 0x95, 0x6f, 0xc7, 0x3f,
	0x5c, 0xe9, 0xae, 0x1f, 0xce, 0xb6, 0xbf, 0x5c, 0x2f, 0x3d, 0x3b, 0xeb, 0xd1, 0x80, 0xcc, 0x20,
	0xd5, 0x1e, 0x12, 0x04, 0x8b, 0x1e, 0xa3, 0x16, 0x34, 0x50, 0x06, 0xf2, 0x10, 0x9b, 0x61, 0x20,
	0x59, 0xa4, 0xd2, 0x66, 0x20, 0x99, 0x63, 0xd8, 0xff, 0xe8, 0xe0, 0x10, 0xd0, 0x9b, 0x40, 0xce,
	0xcb, 0x00, 0xe6, 0x54, 0x36, 0xea, 0x48, 0xda, 0xa4, 0x9a, 0x05, 0xb4, 0x31, 0xce, 0x5b, 0xa8,
	0xcc, 0xb5, 0x94, 0x11, 0x41, 0x08, 0x24, 0x5b, 0x36, 0x97, 0xd9, 0xe0, 0xa1, 0x67, 0xeb, 0x04,
	0x5c, 0xa6, 0x19, 0x68, 0x06, 0x25, 0x33, 0x06, 0x8a, 0x10, 0x43, 0x3a, 0x80, 0xf1, 0x44, 0x30,
	0x3e, 0xf2, 0x1e, 0xd4, 0x46, 0x11, 0xb9, 0xcc, 0xa5, 0xcd, 0xcc, 0x65, 0xc2, 0x69, 0x74, 0x09,
	0x2e, 0xc5, 0x44, 0xc0, 0x23, 0xf4, 0x02, 0xda, 0x1b, 0x08, 0x39, 0x6a, 0xae, 0x44, 0x13, 0x8c,
	0x6d, 0x14, 0x0e, 0x98, 0x8e, 0xfa, 0xdf, 0xaf, 0x77, 0x1f, 0x74, 0xc6, 0x69, 0x4a, 0xb1, 0x0e,
	0x2c, 0x04, 0x85, 0xb3, 0x51, 0x8b, 0xf3, 0x76, 0x28, 0x34, 0xf4, 0x38, 0x1d, 0x46, 0x64, 0x19,
	0xb6, 0x11, 0xb9, 0x19, 0xff, 0x9f, 0x05, 0x30, 0xd0, 0xa4, 0xbe, 0xbd, 0x83, 0x53, 0xb0, 0xef,
	0xef, 0xdf, 0x1a, 0x5a, 0x2d, 0x38, 0xd5, 0x73, 0xb8, 0xfb, 0xee, 0xc1, 0x21, 0xe8, 0x88, 0x70,
	0x47, 0x8d, 0xeb, 0x20, 0xb6, 0x74, 0x06, 0x0d, 0x18, 0x17, 0x31, 0x95, 0x7c, 0x5e, 0xcd, 0x2b,
	0x19, 0x61, 0xbf, 0x42, 0x25, 0x29, 0x27, 0x03, 0xf0, 0x58, 0xed, 0xa6, 0xb9, 0x4d, 0x73, 0x57,
	0x2d, 0x21, 0xa7, 0x54, 0xe7, 0x19, 0xb1, 0xec, 0xed, 0xec, 0xee, 0xdc, 0x54, 0x29, 0x71, 0x41,
	0xac, 0x64, 0xa6, 0x8e, 0x76, 0x12, 0x14, 0xbd, 0x53, 0x2f, 0x6b, 0x42, 0x4b, 0x2b, 0x82, 0xea,
	0x46, 0xb0, 0x08, 0x14, 0x75, 0x74, 0xf9, 0x7c, 0xeb, 0x83, 0x4c, 0x24, 0xf0, 0x9e, 0x52, 0xd6,
	0x49, 0x56, 0x26, 0xa3, 0x94, 0x8a, 0xd6, 0xa7, 0x39, 0x86, 0x6c, 0x3e, 0x53, 0x49, 0x4e, 0x89,
	0x2a, 0x34, 0x0b, 0x46, 0x65, 0x28, 0x65, 0xb5, 0x58, 0x45, 0x85, 0x78, 0xb5, 0x84, 0x51, 0x61,
	0xbe, 0xfa, 0xe5, 0x8f, 0xef, 0xd6, 0x9f, 0xef, 0x3f, 0xab, 0x1e, 0xe2, 0xa6, 0x02, 0x51, 0xce,
	0x7b, 0x9d, 0xeb, 0x5b, 0xff, 0x6c, 0x74, 0x5f, 0x7a, 0x07, 0x03, 0xb1, 0x93, 0x43, 0x7a, 0x8c,
	0xf0, 0x37, 0xce, 0x84, 0xf5, 0x74, 0x4d, 0x0b, 0xf9, 0xcd, 0x0b, 0xeb, 0x16, 0x9c, 0xff, 0xb5,
	0xe2, 0x7c, 0xc5, 0xf9, 0xa5, 0x38, 0x1f, 0xf5, 0x5f, 0xfd, 0x3f, 0xe7, 0xea, 0xf3, 0xea, 0xf8,
	0xd4, 0x99, 0x2f, 0x54, 0xa2, 0x25, 0xcd, 0x94, 0x69, 0x20, 0xac, 0x0b, 0xf0, 0xf5, 0x66, 0xf7,
	0xea, 0xc7, 0x4e, 0x32, 0x13, 0xf5, 0xf4, 0xbd, 0x48, 0xc5, 0x63, 0x1d, 0x78, 0xf3, 0x4c, 0x96,
	0xcf, 0x94, 0xb5, 0x35, 0xd8, 0x7b, 0x12, 0xe9, 0xa2, 0x09, 0x7f, 0xaf, 0x9a, 0xb0, 0x6a, 0xc2,
	0xa5, 0x9a, 0xa0, 0xfa, 0xd7, 0xcf, 0x6d, 0xc2, 0x74, 0xc1, 0x61, 0x5d, 0x85, 0x9f, 0x36, 0xba,
	0x4f, 0x1d, 0x4c, 0x75, 0xa8, 0xa8, 0x7f, 0xf9, 0x4c, 0x74, 0xab, 0x17, 0x2d, 0xe0, 0xd7, 0xce,
	0x79, 0xb5, 0x60, 0xf9, 0xcf, 0x15, 0xcb, 0x2b, 0x96, 0x2f, 0xc5, 0xf2, 0x6b, 0xfd, 0x57, 0xce,
	0x65, 0x99, 0xa7, 0x3a, 0x54, 0x1c, 0xbf, 0xfd, 0xd6, 0xcf, 0xc7, 0xbd, 0xce, 0xfd, 0xe3, 0x5e,
	0xe7, 0xc1, 0x71, 0xaf, 0xf3, 0xcd, 0x49, 0x6f, 0xed, 0xfe, 0x49, 0x6f, 0xed, 0xb7, 0x93, 0xde,
	0xda, 0x27, 0xd7, 0x96, 0xc2, 0x3c, 0x22, 0x77, 0xc9, 0x59, 0xe6, 0x01, 0x39, 0xd9, 0xac, 0xbf,
	0x02, 0x76, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x10, 0xaa, 0x1a, 0x80, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgApiClient is the client API for MsgApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgApiClient interface {
	// Submit create liquidity pool message.
	CreateLiquidityPoolApi(ctx context.Context, in *MsgCreateLiquidityPoolRequest, opts ...grpc.CallOption) (*MsgCreateLiquidityPoolResponse, error)
	// Submit deposit to the liquidity pool batch
	DepositToLiquidityPoolApi(ctx context.Context, in *MsgDepositToLiquidityPoolRequest, opts ...grpc.CallOption) (*MsgDepositToLiquidityPoolResponse, error)
	// Submit withdraw from to the liquidity pool batch
	WithdrawFromLiquidityPoolApi(ctx context.Context, in *MsgWithdrawFromLiquidityPoolRequest, opts ...grpc.CallOption) (*MsgWithdrawFromLiquidityPoolResponse, error)
	// Submit swap to the liquidity pool batch
	SwapApi(ctx context.Context, in *MsgSwapRequest, opts ...grpc.CallOption) (*MsgSwapResponse, error)
}

type msgApiClient struct {
	cc grpc1.ClientConn
}

func NewMsgApiClient(cc grpc1.ClientConn) MsgApiClient {
	return &msgApiClient{cc}
}

func (c *msgApiClient) CreateLiquidityPoolApi(ctx context.Context, in *MsgCreateLiquidityPoolRequest, opts ...grpc.CallOption) (*MsgCreateLiquidityPoolResponse, error) {
	out := new(MsgCreateLiquidityPoolResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.MsgApi/CreateLiquidityPoolApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgApiClient) DepositToLiquidityPoolApi(ctx context.Context, in *MsgDepositToLiquidityPoolRequest, opts ...grpc.CallOption) (*MsgDepositToLiquidityPoolResponse, error) {
	out := new(MsgDepositToLiquidityPoolResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.MsgApi/DepositToLiquidityPoolApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgApiClient) WithdrawFromLiquidityPoolApi(ctx context.Context, in *MsgWithdrawFromLiquidityPoolRequest, opts ...grpc.CallOption) (*MsgWithdrawFromLiquidityPoolResponse, error) {
	out := new(MsgWithdrawFromLiquidityPoolResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.MsgApi/WithdrawFromLiquidityPoolApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgApiClient) SwapApi(ctx context.Context, in *MsgSwapRequest, opts ...grpc.CallOption) (*MsgSwapResponse, error) {
	out := new(MsgSwapResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.MsgApi/SwapApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgApiServer is the server API for MsgApi service.
type MsgApiServer interface {
	// Submit create liquidity pool message.
	CreateLiquidityPoolApi(context.Context, *MsgCreateLiquidityPoolRequest) (*MsgCreateLiquidityPoolResponse, error)
	// Submit deposit to the liquidity pool batch
	DepositToLiquidityPoolApi(context.Context, *MsgDepositToLiquidityPoolRequest) (*MsgDepositToLiquidityPoolResponse, error)
	// Submit withdraw from to the liquidity pool batch
	WithdrawFromLiquidityPoolApi(context.Context, *MsgWithdrawFromLiquidityPoolRequest) (*MsgWithdrawFromLiquidityPoolResponse, error)
	// Submit swap to the liquidity pool batch
	SwapApi(context.Context, *MsgSwapRequest) (*MsgSwapResponse, error)
}

// UnimplementedMsgApiServer can be embedded to have forward compatible implementations.
type UnimplementedMsgApiServer struct {
}

func (*UnimplementedMsgApiServer) CreateLiquidityPoolApi(ctx context.Context, req *MsgCreateLiquidityPoolRequest) (*MsgCreateLiquidityPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLiquidityPoolApi not implemented")
}
func (*UnimplementedMsgApiServer) DepositToLiquidityPoolApi(ctx context.Context, req *MsgDepositToLiquidityPoolRequest) (*MsgDepositToLiquidityPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositToLiquidityPoolApi not implemented")
}
func (*UnimplementedMsgApiServer) WithdrawFromLiquidityPoolApi(ctx context.Context, req *MsgWithdrawFromLiquidityPoolRequest) (*MsgWithdrawFromLiquidityPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawFromLiquidityPoolApi not implemented")
}
func (*UnimplementedMsgApiServer) SwapApi(ctx context.Context, req *MsgSwapRequest) (*MsgSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapApi not implemented")
}

func RegisterMsgApiServer(s grpc1.Server, srv MsgApiServer) {
	s.RegisterService(&_MsgApi_serviceDesc, srv)
}

func _MsgApi_CreateLiquidityPoolApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateLiquidityPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgApiServer).CreateLiquidityPoolApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.MsgApi/CreateLiquidityPoolApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgApiServer).CreateLiquidityPoolApi(ctx, req.(*MsgCreateLiquidityPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgApi_DepositToLiquidityPoolApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositToLiquidityPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgApiServer).DepositToLiquidityPoolApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.MsgApi/DepositToLiquidityPoolApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgApiServer).DepositToLiquidityPoolApi(ctx, req.(*MsgDepositToLiquidityPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgApi_WithdrawFromLiquidityPoolApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawFromLiquidityPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgApiServer).WithdrawFromLiquidityPoolApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.MsgApi/WithdrawFromLiquidityPoolApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgApiServer).WithdrawFromLiquidityPoolApi(ctx, req.(*MsgWithdrawFromLiquidityPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgApi_SwapApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgApiServer).SwapApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.MsgApi/SwapApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgApiServer).SwapApi(ctx, req.(*MsgSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tendermint.liquidity.MsgApi",
	HandlerType: (*MsgApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLiquidityPoolApi",
			Handler:    _MsgApi_CreateLiquidityPoolApi_Handler,
		},
		{
			MethodName: "DepositToLiquidityPoolApi",
			Handler:    _MsgApi_DepositToLiquidityPoolApi_Handler,
		},
		{
			MethodName: "WithdrawFromLiquidityPoolApi",
			Handler:    _MsgApi_WithdrawFromLiquidityPoolApi_Handler,
		},
		{
			MethodName: "SwapApi",
			Handler:    _MsgApi_SwapApi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg.proto",
}
