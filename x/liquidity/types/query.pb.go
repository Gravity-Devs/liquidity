// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// the request type for the QueryLiquidityPool RPC method. requestable specified pool_id.
type QueryLiquidityPoolRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryLiquidityPoolRequest) Reset()         { *m = QueryLiquidityPoolRequest{} }
func (m *QueryLiquidityPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityPoolRequest) ProtoMessage()    {}
func (*QueryLiquidityPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{0}
}
func (m *QueryLiquidityPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityPoolRequest.Merge(m, src)
}
func (m *QueryLiquidityPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityPoolRequest proto.InternalMessageInfo

func (m *QueryLiquidityPoolRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

// the response type for the QueryLiquidityPoolResponse RPC method. It returns the liquidity pool with batch and metadata containing total pool coin supply and reserved coins corresponding to the requested pool_id.
type QueryLiquidityPoolResponse struct {
	LiquidityPool         LiquidityPool         `protobuf:"bytes,1,opt,name=liquidity_pool,json=liquidityPool,proto3" json:"liquidity_pool"`
	LiquidityPoolMetadata LiquidityPoolMetadata `protobuf:"bytes,2,opt,name=liquidity_pool_metadata,json=liquidityPoolMetadata,proto3" json:"liquidity_pool_metadata"`
	LiquidityPoolBatch    LiquidityPoolBatch    `protobuf:"bytes,3,opt,name=liquidity_pool_batch,json=liquidityPoolBatch,proto3" json:"liquidity_pool_batch"`
}

func (m *QueryLiquidityPoolResponse) Reset()         { *m = QueryLiquidityPoolResponse{} }
func (m *QueryLiquidityPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityPoolResponse) ProtoMessage()    {}
func (*QueryLiquidityPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{1}
}
func (m *QueryLiquidityPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityPoolResponse.Merge(m, src)
}
func (m *QueryLiquidityPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityPoolResponse proto.InternalMessageInfo

func (m *QueryLiquidityPoolResponse) GetLiquidityPool() LiquidityPool {
	if m != nil {
		return m.LiquidityPool
	}
	return LiquidityPool{}
}

func (m *QueryLiquidityPoolResponse) GetLiquidityPoolMetadata() LiquidityPoolMetadata {
	if m != nil {
		return m.LiquidityPoolMetadata
	}
	return LiquidityPoolMetadata{}
}

func (m *QueryLiquidityPoolResponse) GetLiquidityPoolBatch() LiquidityPoolBatch {
	if m != nil {
		return m.LiquidityPoolBatch
	}
	return LiquidityPoolBatch{}
}

// the request type for the QueryLiquidityPoolBatch RPC method. requestable including specified pool_id.
type QueryLiquidityPoolBatchRequest struct {
	// id of the target pool for query
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryLiquidityPoolBatchRequest) Reset()         { *m = QueryLiquidityPoolBatchRequest{} }
func (m *QueryLiquidityPoolBatchRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityPoolBatchRequest) ProtoMessage()    {}
func (*QueryLiquidityPoolBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{2}
}
func (m *QueryLiquidityPoolBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityPoolBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityPoolBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityPoolBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityPoolBatchRequest.Merge(m, src)
}
func (m *QueryLiquidityPoolBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityPoolBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityPoolBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityPoolBatchRequest proto.InternalMessageInfo

func (m *QueryLiquidityPoolBatchRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

// the response type for the QueryLiquidityPoolBatchResponse RPC method. It returns the liquidity pool batch corresponding to the requested pool_id.
type QueryLiquidityPoolBatchResponse struct {
	Batch LiquidityPoolBatch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch"`
}

func (m *QueryLiquidityPoolBatchResponse) Reset()         { *m = QueryLiquidityPoolBatchResponse{} }
func (m *QueryLiquidityPoolBatchResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityPoolBatchResponse) ProtoMessage()    {}
func (*QueryLiquidityPoolBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{3}
}
func (m *QueryLiquidityPoolBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityPoolBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityPoolBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityPoolBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityPoolBatchResponse.Merge(m, src)
}
func (m *QueryLiquidityPoolBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityPoolBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityPoolBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityPoolBatchResponse proto.InternalMessageInfo

func (m *QueryLiquidityPoolBatchResponse) GetBatch() LiquidityPoolBatch {
	if m != nil {
		return m.Batch
	}
	return LiquidityPoolBatch{}
}

// the request type for the QueryLiquidityPools RPC method. requestable including pagination offset, limit, key.
type QueryLiquidityPoolsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLiquidityPoolsRequest) Reset()         { *m = QueryLiquidityPoolsRequest{} }
func (m *QueryLiquidityPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityPoolsRequest) ProtoMessage()    {}
func (*QueryLiquidityPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{4}
}
func (m *QueryLiquidityPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityPoolsRequest.Merge(m, src)
}
func (m *QueryLiquidityPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityPoolsRequest proto.InternalMessageInfo

func (m *QueryLiquidityPoolsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// the response type for the QueryLiquidityPoolsResponse RPC method. This includes list of all liquidity pools currently existed and paging results containing next_key and total count.
type QueryLiquidityPoolsResponse struct {
	Pools []QueryLiquidityPoolResponse `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools"`
	// pagination defines the pagination in the response. not working on this version.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLiquidityPoolsResponse) Reset()         { *m = QueryLiquidityPoolsResponse{} }
func (m *QueryLiquidityPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityPoolsResponse) ProtoMessage()    {}
func (*QueryLiquidityPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{5}
}
func (m *QueryLiquidityPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityPoolsResponse.Merge(m, src)
}
func (m *QueryLiquidityPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityPoolsResponse proto.InternalMessageInfo

func (m *QueryLiquidityPoolsResponse) GetPools() []QueryLiquidityPoolResponse {
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *QueryLiquidityPoolsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// the request type for the QueryLiquidityPoolsBatch RPC method, requestable including pagination offset, limit, key.
type QueryLiquidityPoolsBatchRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLiquidityPoolsBatchRequest) Reset()         { *m = QueryLiquidityPoolsBatchRequest{} }
func (m *QueryLiquidityPoolsBatchRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityPoolsBatchRequest) ProtoMessage()    {}
func (*QueryLiquidityPoolsBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{6}
}
func (m *QueryLiquidityPoolsBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityPoolsBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityPoolsBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityPoolsBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityPoolsBatchRequest.Merge(m, src)
}
func (m *QueryLiquidityPoolsBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityPoolsBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityPoolsBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityPoolsBatchRequest proto.InternalMessageInfo

func (m *QueryLiquidityPoolsBatchRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// the response type for the QueryLiquidityPoolsBatchResponse RPC method. This includes list of all batches that all currently existing pools and paging results containing next_key and total count.
type QueryLiquidityPoolsBatchResponse struct {
	PoolsBatch []QueryLiquidityPoolBatchResponse `protobuf:"bytes,1,rep,name=pools_batch,json=poolsBatch,proto3" json:"pools_batch"`
	// pagination defines the pagination in the response. not working on this version.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLiquidityPoolsBatchResponse) Reset()         { *m = QueryLiquidityPoolsBatchResponse{} }
func (m *QueryLiquidityPoolsBatchResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityPoolsBatchResponse) ProtoMessage()    {}
func (*QueryLiquidityPoolsBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{7}
}
func (m *QueryLiquidityPoolsBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityPoolsBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityPoolsBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityPoolsBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityPoolsBatchResponse.Merge(m, src)
}
func (m *QueryLiquidityPoolsBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityPoolsBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityPoolsBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityPoolsBatchResponse proto.InternalMessageInfo

func (m *QueryLiquidityPoolsBatchResponse) GetPoolsBatch() []QueryLiquidityPoolBatchResponse {
	if m != nil {
		return m.PoolsBatch
	}
	return nil
}

func (m *QueryLiquidityPoolsBatchResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParamsRequest is request type for the QueryParams RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{8}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// the response type for the QueryParamsResponse RPC method. This includes current parameter of the liquidity module.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{9}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// the request type for the QueryPoolBatchSwapMsgs RPC method. requestable including specified pool_id and pagination offset, limit, key.
type QueryPoolBatchSwapMsgsRequest struct {
	// id of the target pool for query
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPoolBatchSwapMsgsRequest) Reset()         { *m = QueryPoolBatchSwapMsgsRequest{} }
func (m *QueryPoolBatchSwapMsgsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolBatchSwapMsgsRequest) ProtoMessage()    {}
func (*QueryPoolBatchSwapMsgsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{10}
}
func (m *QueryPoolBatchSwapMsgsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolBatchSwapMsgsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolBatchSwapMsgsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolBatchSwapMsgsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolBatchSwapMsgsRequest.Merge(m, src)
}
func (m *QueryPoolBatchSwapMsgsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolBatchSwapMsgsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolBatchSwapMsgsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolBatchSwapMsgsRequest proto.InternalMessageInfo

func (m *QueryPoolBatchSwapMsgsRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryPoolBatchSwapMsgsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// the request type for the QueryPoolBatchSwap RPC method. requestable including specified pool_id and msg_index
type QueryPoolBatchSwapMsgRequest struct {
	// id of the target pool for query
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// target msg_index of the pool
	MsgIndex uint64 `protobuf:"varint,2,opt,name=msg_index,json=msgIndex,proto3" json:"msg_index,omitempty"`
}

func (m *QueryPoolBatchSwapMsgRequest) Reset()         { *m = QueryPoolBatchSwapMsgRequest{} }
func (m *QueryPoolBatchSwapMsgRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolBatchSwapMsgRequest) ProtoMessage()    {}
func (*QueryPoolBatchSwapMsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{11}
}
func (m *QueryPoolBatchSwapMsgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolBatchSwapMsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolBatchSwapMsgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolBatchSwapMsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolBatchSwapMsgRequest.Merge(m, src)
}
func (m *QueryPoolBatchSwapMsgRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolBatchSwapMsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolBatchSwapMsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolBatchSwapMsgRequest proto.InternalMessageInfo

func (m *QueryPoolBatchSwapMsgRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryPoolBatchSwapMsgRequest) GetMsgIndex() uint64 {
	if m != nil {
		return m.MsgIndex
	}
	return 0
}

// the response type for the QueryPoolBatchSwapMsgs RPC method. This includes list of all currently existing swap messages of the batch and paging results containing next_key and total count.
type QueryPoolBatchSwapMsgsResponse struct {
	Swaps []BatchPoolSwapMsg `protobuf:"bytes,1,rep,name=swaps,proto3" json:"swaps"`
	// pagination defines the pagination in the response. not working on this version.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPoolBatchSwapMsgsResponse) Reset()         { *m = QueryPoolBatchSwapMsgsResponse{} }
func (m *QueryPoolBatchSwapMsgsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolBatchSwapMsgsResponse) ProtoMessage()    {}
func (*QueryPoolBatchSwapMsgsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{12}
}
func (m *QueryPoolBatchSwapMsgsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolBatchSwapMsgsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolBatchSwapMsgsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolBatchSwapMsgsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolBatchSwapMsgsResponse.Merge(m, src)
}
func (m *QueryPoolBatchSwapMsgsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolBatchSwapMsgsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolBatchSwapMsgsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolBatchSwapMsgsResponse proto.InternalMessageInfo

func (m *QueryPoolBatchSwapMsgsResponse) GetSwaps() []BatchPoolSwapMsg {
	if m != nil {
		return m.Swaps
	}
	return nil
}

func (m *QueryPoolBatchSwapMsgsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// the response type for the QueryPoolBatchSwapMsg RPC method. This includes a batch swap message of the batch
type QueryPoolBatchSwapMsgResponse struct {
	Swaps BatchPoolSwapMsg `protobuf:"bytes,1,opt,name=swaps,proto3" json:"swaps"`
}

func (m *QueryPoolBatchSwapMsgResponse) Reset()         { *m = QueryPoolBatchSwapMsgResponse{} }
func (m *QueryPoolBatchSwapMsgResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolBatchSwapMsgResponse) ProtoMessage()    {}
func (*QueryPoolBatchSwapMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{13}
}
func (m *QueryPoolBatchSwapMsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolBatchSwapMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolBatchSwapMsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolBatchSwapMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolBatchSwapMsgResponse.Merge(m, src)
}
func (m *QueryPoolBatchSwapMsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolBatchSwapMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolBatchSwapMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolBatchSwapMsgResponse proto.InternalMessageInfo

func (m *QueryPoolBatchSwapMsgResponse) GetSwaps() BatchPoolSwapMsg {
	if m != nil {
		return m.Swaps
	}
	return BatchPoolSwapMsg{}
}

// the request type for the QueryPoolBatchDeposit RPC method. requestable including specified pool_id and pagination offset, limit, key.
type QueryPoolBatchDepositMsgsRequest struct {
	// id of the target pool for query
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPoolBatchDepositMsgsRequest) Reset()         { *m = QueryPoolBatchDepositMsgsRequest{} }
func (m *QueryPoolBatchDepositMsgsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolBatchDepositMsgsRequest) ProtoMessage()    {}
func (*QueryPoolBatchDepositMsgsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{14}
}
func (m *QueryPoolBatchDepositMsgsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolBatchDepositMsgsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolBatchDepositMsgsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolBatchDepositMsgsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolBatchDepositMsgsRequest.Merge(m, src)
}
func (m *QueryPoolBatchDepositMsgsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolBatchDepositMsgsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolBatchDepositMsgsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolBatchDepositMsgsRequest proto.InternalMessageInfo

func (m *QueryPoolBatchDepositMsgsRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryPoolBatchDepositMsgsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// the request type for the QueryPoolBatchDeposit RPC method. requestable including specified pool_id and msg_index
type QueryPoolBatchDepositMsgRequest struct {
	// id of the target pool for query
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// target msg_index of the pool
	MsgIndex uint64 `protobuf:"varint,2,opt,name=msg_index,json=msgIndex,proto3" json:"msg_index,omitempty"`
}

func (m *QueryPoolBatchDepositMsgRequest) Reset()         { *m = QueryPoolBatchDepositMsgRequest{} }
func (m *QueryPoolBatchDepositMsgRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolBatchDepositMsgRequest) ProtoMessage()    {}
func (*QueryPoolBatchDepositMsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{15}
}
func (m *QueryPoolBatchDepositMsgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolBatchDepositMsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolBatchDepositMsgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolBatchDepositMsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolBatchDepositMsgRequest.Merge(m, src)
}
func (m *QueryPoolBatchDepositMsgRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolBatchDepositMsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolBatchDepositMsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolBatchDepositMsgRequest proto.InternalMessageInfo

func (m *QueryPoolBatchDepositMsgRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryPoolBatchDepositMsgRequest) GetMsgIndex() uint64 {
	if m != nil {
		return m.MsgIndex
	}
	return 0
}

// the response type for the QueryPoolBatchDeposit RPC method. This includes a list of all currently existing deposit messages of the batch and paging results containing next_key and total count.
type QueryPoolBatchDepositMsgsResponse struct {
	Deposits []BatchPoolDepositMsg `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits"`
	// pagination defines the pagination in the response. not working on this version.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPoolBatchDepositMsgsResponse) Reset()         { *m = QueryPoolBatchDepositMsgsResponse{} }
func (m *QueryPoolBatchDepositMsgsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolBatchDepositMsgsResponse) ProtoMessage()    {}
func (*QueryPoolBatchDepositMsgsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{16}
}
func (m *QueryPoolBatchDepositMsgsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolBatchDepositMsgsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolBatchDepositMsgsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolBatchDepositMsgsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolBatchDepositMsgsResponse.Merge(m, src)
}
func (m *QueryPoolBatchDepositMsgsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolBatchDepositMsgsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolBatchDepositMsgsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolBatchDepositMsgsResponse proto.InternalMessageInfo

func (m *QueryPoolBatchDepositMsgsResponse) GetDeposits() []BatchPoolDepositMsg {
	if m != nil {
		return m.Deposits
	}
	return nil
}

func (m *QueryPoolBatchDepositMsgsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// the response type for the QueryPoolBatchDepositMsg RPC method. This includes a batch swap message of the batch
type QueryPoolBatchDepositMsgResponse struct {
	Deposits BatchPoolDepositMsg `protobuf:"bytes,1,opt,name=deposits,proto3" json:"deposits"`
}

func (m *QueryPoolBatchDepositMsgResponse) Reset()         { *m = QueryPoolBatchDepositMsgResponse{} }
func (m *QueryPoolBatchDepositMsgResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolBatchDepositMsgResponse) ProtoMessage()    {}
func (*QueryPoolBatchDepositMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{17}
}
func (m *QueryPoolBatchDepositMsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolBatchDepositMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolBatchDepositMsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolBatchDepositMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolBatchDepositMsgResponse.Merge(m, src)
}
func (m *QueryPoolBatchDepositMsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolBatchDepositMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolBatchDepositMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolBatchDepositMsgResponse proto.InternalMessageInfo

func (m *QueryPoolBatchDepositMsgResponse) GetDeposits() BatchPoolDepositMsg {
	if m != nil {
		return m.Deposits
	}
	return BatchPoolDepositMsg{}
}

// the request type for the QueryPoolBatchWithdraw RPC method. requestable including specified pool_id and pagination offset, limit, key.
type QueryPoolBatchWithdrawMsgsRequest struct {
	// id of the target pool for query
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPoolBatchWithdrawMsgsRequest) Reset()         { *m = QueryPoolBatchWithdrawMsgsRequest{} }
func (m *QueryPoolBatchWithdrawMsgsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolBatchWithdrawMsgsRequest) ProtoMessage()    {}
func (*QueryPoolBatchWithdrawMsgsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{18}
}
func (m *QueryPoolBatchWithdrawMsgsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolBatchWithdrawMsgsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolBatchWithdrawMsgsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolBatchWithdrawMsgsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolBatchWithdrawMsgsRequest.Merge(m, src)
}
func (m *QueryPoolBatchWithdrawMsgsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolBatchWithdrawMsgsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolBatchWithdrawMsgsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolBatchWithdrawMsgsRequest proto.InternalMessageInfo

func (m *QueryPoolBatchWithdrawMsgsRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryPoolBatchWithdrawMsgsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// the request type for the QueryPoolBatchWithdraw RPC method. requestable including specified pool_id and msg_index
type QueryPoolBatchWithdrawMsgRequest struct {
	// id of the target pool for query
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// target msg_index of the pool
	MsgIndex uint64 `protobuf:"varint,2,opt,name=msg_index,json=msgIndex,proto3" json:"msg_index,omitempty"`
}

func (m *QueryPoolBatchWithdrawMsgRequest) Reset()         { *m = QueryPoolBatchWithdrawMsgRequest{} }
func (m *QueryPoolBatchWithdrawMsgRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolBatchWithdrawMsgRequest) ProtoMessage()    {}
func (*QueryPoolBatchWithdrawMsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{19}
}
func (m *QueryPoolBatchWithdrawMsgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolBatchWithdrawMsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolBatchWithdrawMsgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolBatchWithdrawMsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolBatchWithdrawMsgRequest.Merge(m, src)
}
func (m *QueryPoolBatchWithdrawMsgRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolBatchWithdrawMsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolBatchWithdrawMsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolBatchWithdrawMsgRequest proto.InternalMessageInfo

func (m *QueryPoolBatchWithdrawMsgRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryPoolBatchWithdrawMsgRequest) GetMsgIndex() uint64 {
	if m != nil {
		return m.MsgIndex
	}
	return 0
}

// the response type for the QueryPoolBatchWithdraw RPC method. This includes a list of all currently existing withdraw messages of the batch and paging results containing next_key and total count.
type QueryPoolBatchWithdrawMsgsResponse struct {
	Withdraws []BatchPoolWithdrawMsg `protobuf:"bytes,1,rep,name=withdraws,proto3" json:"withdraws"`
	// pagination defines the pagination in the response. not working on this version.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPoolBatchWithdrawMsgsResponse) Reset()         { *m = QueryPoolBatchWithdrawMsgsResponse{} }
func (m *QueryPoolBatchWithdrawMsgsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolBatchWithdrawMsgsResponse) ProtoMessage()    {}
func (*QueryPoolBatchWithdrawMsgsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{20}
}
func (m *QueryPoolBatchWithdrawMsgsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolBatchWithdrawMsgsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolBatchWithdrawMsgsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolBatchWithdrawMsgsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolBatchWithdrawMsgsResponse.Merge(m, src)
}
func (m *QueryPoolBatchWithdrawMsgsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolBatchWithdrawMsgsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolBatchWithdrawMsgsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolBatchWithdrawMsgsResponse proto.InternalMessageInfo

func (m *QueryPoolBatchWithdrawMsgsResponse) GetWithdraws() []BatchPoolWithdrawMsg {
	if m != nil {
		return m.Withdraws
	}
	return nil
}

func (m *QueryPoolBatchWithdrawMsgsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// the response type for the QueryPoolBatchWithdrawMsg RPC method. This includes a batch swap message of the batch
type QueryPoolBatchWithdrawMsgResponse struct {
	Withdraws BatchPoolWithdrawMsg `protobuf:"bytes,1,opt,name=withdraws,proto3" json:"withdraws"`
}

func (m *QueryPoolBatchWithdrawMsgResponse) Reset()         { *m = QueryPoolBatchWithdrawMsgResponse{} }
func (m *QueryPoolBatchWithdrawMsgResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolBatchWithdrawMsgResponse) ProtoMessage()    {}
func (*QueryPoolBatchWithdrawMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{21}
}
func (m *QueryPoolBatchWithdrawMsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolBatchWithdrawMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolBatchWithdrawMsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolBatchWithdrawMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolBatchWithdrawMsgResponse.Merge(m, src)
}
func (m *QueryPoolBatchWithdrawMsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolBatchWithdrawMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolBatchWithdrawMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolBatchWithdrawMsgResponse proto.InternalMessageInfo

func (m *QueryPoolBatchWithdrawMsgResponse) GetWithdraws() BatchPoolWithdrawMsg {
	if m != nil {
		return m.Withdraws
	}
	return BatchPoolWithdrawMsg{}
}

func init() {
	proto.RegisterType((*QueryLiquidityPoolRequest)(nil), "tendermint.liquidity.QueryLiquidityPoolRequest")
	proto.RegisterType((*QueryLiquidityPoolResponse)(nil), "tendermint.liquidity.QueryLiquidityPoolResponse")
	proto.RegisterType((*QueryLiquidityPoolBatchRequest)(nil), "tendermint.liquidity.QueryLiquidityPoolBatchRequest")
	proto.RegisterType((*QueryLiquidityPoolBatchResponse)(nil), "tendermint.liquidity.QueryLiquidityPoolBatchResponse")
	proto.RegisterType((*QueryLiquidityPoolsRequest)(nil), "tendermint.liquidity.QueryLiquidityPoolsRequest")
	proto.RegisterType((*QueryLiquidityPoolsResponse)(nil), "tendermint.liquidity.QueryLiquidityPoolsResponse")
	proto.RegisterType((*QueryLiquidityPoolsBatchRequest)(nil), "tendermint.liquidity.QueryLiquidityPoolsBatchRequest")
	proto.RegisterType((*QueryLiquidityPoolsBatchResponse)(nil), "tendermint.liquidity.QueryLiquidityPoolsBatchResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "tendermint.liquidity.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "tendermint.liquidity.QueryParamsResponse")
	proto.RegisterType((*QueryPoolBatchSwapMsgsRequest)(nil), "tendermint.liquidity.QueryPoolBatchSwapMsgsRequest")
	proto.RegisterType((*QueryPoolBatchSwapMsgRequest)(nil), "tendermint.liquidity.QueryPoolBatchSwapMsgRequest")
	proto.RegisterType((*QueryPoolBatchSwapMsgsResponse)(nil), "tendermint.liquidity.QueryPoolBatchSwapMsgsResponse")
	proto.RegisterType((*QueryPoolBatchSwapMsgResponse)(nil), "tendermint.liquidity.QueryPoolBatchSwapMsgResponse")
	proto.RegisterType((*QueryPoolBatchDepositMsgsRequest)(nil), "tendermint.liquidity.QueryPoolBatchDepositMsgsRequest")
	proto.RegisterType((*QueryPoolBatchDepositMsgRequest)(nil), "tendermint.liquidity.QueryPoolBatchDepositMsgRequest")
	proto.RegisterType((*QueryPoolBatchDepositMsgsResponse)(nil), "tendermint.liquidity.QueryPoolBatchDepositMsgsResponse")
	proto.RegisterType((*QueryPoolBatchDepositMsgResponse)(nil), "tendermint.liquidity.QueryPoolBatchDepositMsgResponse")
	proto.RegisterType((*QueryPoolBatchWithdrawMsgsRequest)(nil), "tendermint.liquidity.QueryPoolBatchWithdrawMsgsRequest")
	proto.RegisterType((*QueryPoolBatchWithdrawMsgRequest)(nil), "tendermint.liquidity.QueryPoolBatchWithdrawMsgRequest")
	proto.RegisterType((*QueryPoolBatchWithdrawMsgsResponse)(nil), "tendermint.liquidity.QueryPoolBatchWithdrawMsgsResponse")
	proto.RegisterType((*QueryPoolBatchWithdrawMsgResponse)(nil), "tendermint.liquidity.QueryPoolBatchWithdrawMsgResponse")
}

func init() { proto.RegisterFile("query.proto", fileDescriptor_5c6ac9b241082464) }

var fileDescriptor_5c6ac9b241082464 = []byte{
	// 1785 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x9a, 0xdb, 0x6f, 0xdc, 0x4a,
	0x19, 0xc0, 0xe3, 0xc4, 0x1b, 0xce, 0x99, 0xe8, 0x1c, 0x7a, 0x26, 0x29, 0x27, 0xf8, 0xa4, 0xdb,
	0xc1, 0x48, 0x6d, 0xda, 0xa6, 0xeb, 0x64, 0x93, 0xa6, 0x6d, 0x50, 0x1f, 0x36, 0x2a, 0x45, 0xe9,
	0x35, 0x4d, 0x2b, 0xb5, 0xe2, 0xa2, 0xc5, 0x6b, 0x4f, 0x1d, 0x83, 0xd7, 0xe3, 0x7a, 0x66, 0x73,
	0x51, 0x88, 0xa8, 0x5a, 0x2a, 0x90, 0x50, 0xa5, 0xb2, 0xc0, 0x33, 0x2f, 0xc0, 0x0b, 0x82, 0x27,
	0x5e, 0x68, 0x41, 0x45, 0x42, 0x88, 0x82, 0x84, 0xa8, 0x84, 0xaa, 0xf2, 0x50, 0x21, 0x68, 0xf9,
	0x43, 0x90, 0xc7, 0xe3, 0x8d, 0x77, 0xd7, 0xde, 0x4b, 0x12, 0xf5, 0xf4, 0xb2, 0x4f, 0x89, 0x3d,
	0xf3, 0xdd, 0x7f, 0xfe, 0x3c, 0x33, 0x6b, 0x30, 0x74, 0xb3, 0x82, 0xfd, 0xf5, 0x9c, 0xe7, 0x13,
	0x46, 0xe0, 0x08, 0xc3, 0xae, 0x89, 0xfd, 0xb2, 0xed, 0xb2, 0x9c, 0x63, 0xdf, 0xac, 0xd8, 0xa6,
	0xcd, 0xd6, 0x95, 0x11, 0x8b, 0x58, 0x84, 0x4f, 0xd0, 0x82, 0xff, 0xc2, 0xb9, 0xca, 0x67, 0x6b,
	0x13, 0xc4, 0x8d, 0x31, 0x8b, 0x10, 0xcb, 0xc1, 0x9a, 0xee, 0xd9, 0x9a, 0xee, 0xba, 0x84, 0xe9,
	0xcc, 0x26, 0x2e, 0x15, 0xa3, 0xfb, 0x0c, 0x42, 0xcb, 0x84, 0x16, 0x43, 0x3d, 0x9e, 0x6e, 0xd9,
	0x2e, 0x1f, 0x17, 0xc3, 0xe1, 0x1f, 0xe3, 0xa8, 0x85, 0xdd, 0xa3, 0xc4, 0xc3, 0xae, 0xee, 0xd9,
	0x2b, 0x79, 0x8d, 0x78, 0x5c, 0x45, 0xb3, 0x3a, 0x75, 0x06, 0x7c, 0xfe, 0x72, 0xe0, 0xf8, 0xf9,
	0xc8, 0x89, 0x45, 0x42, 0x9c, 0x25, 0x7c, 0xb3, 0x82, 0x29, 0x83, 0x1f, 0x83, 0xcf, 0x78, 0x84,
	0x38, 0x45, 0xdb, 0x1c, 0x95, 0x90, 0x34, 0x2e, 0x2f, 0x0d, 0x06, 0x97, 0x0b, 0xa6, 0xfa, 0xb0,
	0x1f, 0x28, 0x49, 0x62, 0xd4, 0x23, 0x2e, 0xc5, 0x70, 0x11, 0x7c, 0x58, 0x0b, 0xaa, 0x18, 0x88,
	0x70, 0xf1, 0xa1, 0xfc, 0x17, 0x73, 0x49, 0x79, 0xc9, 0xd5, 0x29, 0x99, 0x97, 0x1f, 0xff, 0x7b,
	0x7f, 0xdf, 0xd2, 0x07, 0x4e, 0xfc, 0x26, 0xb4, 0xc1, 0xc7, 0xf5, 0x1a, 0x8b, 0x65, 0xcc, 0x74,
	0x53, 0x67, 0xfa, 0x68, 0x3f, 0x57, 0x7d, 0xa4, 0x03, 0xd5, 0x17, 0x84, 0x88, 0x30, 0xb1, 0xd7,
	0x49, 0x1a, 0x84, 0xdf, 0x04, 0x23, 0x0d, 0xa6, 0x4a, 0x3a, 0x33, 0x96, 0x47, 0x07, 0xb8, 0x9d,
	0xf1, 0x4e, 0x42, 0x08, 0xe6, 0x0b, 0x23, 0xd0, 0x69, 0x1a, 0x51, 0x4f, 0x82, 0x6c, 0x73, 0xf2,
	0xf8, 0x50, 0xdb, 0xc4, 0x5b, 0x60, 0x7f, 0xaa, 0xa8, 0x48, 0xfe, 0x69, 0x90, 0x09, 0x1d, 0x96,
	0xb6, 0xe5, 0x70, 0x28, 0xac, 0x9a, 0x49, 0x05, 0xa6, 0x91, 0x7f, 0x67, 0x00, 0xd8, 0x22, 0x4f,
	0x18, 0x3a, 0x90, 0x0b, 0xc9, 0xcc, 0x95, 0x74, 0x8a, 0x73, 0xe1, 0xd3, 0xb0, 0x32, 0x55, 0xc2,
	0x4c, 0x9f, 0xca, 0x2d, 0xea, 0x16, 0x16, 0xb2, 0x4b, 0x31, 0x49, 0xf5, 0xb7, 0x12, 0xf8, 0x24,
	0xd1, 0x8c, 0x88, 0xe5, 0x3c, 0xc8, 0x04, 0x81, 0xd3, 0x51, 0x09, 0x0d, 0x8c, 0x0f, 0xe5, 0x27,
	0x93, 0x63, 0x49, 0x27, 0x31, 0x8a, 0x89, 0x2b, 0x81, 0x5f, 0xa9, 0xf3, 0x3a, 0xe4, 0xe6, 0x60,
	0x5b, 0xaf, 0x43, 0x4d, 0x75, 0x6e, 0xdb, 0x49, 0x55, 0xa0, 0x75, 0x15, 0xdc, 0xad, 0x0c, 0xfd,
	0x55, 0x02, 0x28, 0xdd, 0x96, 0x48, 0xd3, 0xd7, 0xc1, 0x10, 0x8f, 0xb0, 0x18, 0x15, 0x3e, 0x48,
	0xd6, 0xb1, 0x4e, 0x93, 0x55, 0xa7, 0x4b, 0x64, 0x0c, 0x78, 0x35, 0x2b, 0xbb, 0x97, 0xb6, 0x11,
	0x00, 0xb9, 0xf5, 0x45, 0xdd, 0xd7, 0xcb, 0x11, 0x4b, 0xea, 0x65, 0x30, 0x5c, 0x77, 0x57, 0xc4,
	0x34, 0x07, 0x06, 0x3d, 0x7e, 0x47, 0x24, 0x6f, 0x2c, 0x39, 0x9c, 0x50, 0x4a, 0x78, 0x2d, 0x24,
	0xd4, 0x5b, 0x12, 0xd8, 0x17, 0xea, 0x8c, 0xc2, 0xbb, 0xb2, 0xaa, 0x7b, 0x17, 0xa8, 0x45, 0xdb,
	0x3d, 0x60, 0x0d, 0x75, 0xeb, 0xdf, 0x76, 0xdd, 0xae, 0x82, 0xb1, 0x44, 0x0f, 0xda, 0x3a, 0xf0,
	0x09, 0x78, 0xbf, 0x4c, 0xad, 0xa2, 0xed, 0x9a, 0x78, 0x8d, 0xdb, 0x97, 0x97, 0xde, 0x2b, 0x53,
	0x6b, 0x21, 0xb8, 0x56, 0x7f, 0x2d, 0x89, 0xd6, 0x91, 0x10, 0x98, 0xc8, 0xdb, 0x3c, 0xc8, 0xd0,
	0x55, 0xdd, 0x8b, 0x1e, 0x99, 0x03, 0xc9, 0x69, 0xe3, 0xb2, 0x81, 0x12, 0x21, 0x1f, 0x3d, 0x28,
	0x5c, 0x74, 0xf7, 0x2a, 0x6e, 0xa4, 0xd4, 0x21, 0xc9, 0x5b, 0x69, 0x9b, 0xde, 0xaa, 0x77, 0xa2,
	0x47, 0xa4, 0x66, 0xe5, 0x34, 0xf6, 0x08, 0xb5, 0xd9, 0x2b, 0x2d, 0xf8, 0x35, 0xd1, 0x13, 0x12,
	0x9c, 0xd8, 0x59, 0xcd, 0x7f, 0x27, 0x81, 0x2f, 0xb4, 0x08, 0x4f, 0x24, 0xf2, 0x1c, 0x78, 0xcf,
	0x0c, 0x6f, 0x47, 0x95, 0x3f, 0xd4, 0x26, 0x97, 0x5b, 0x5a, 0x44, 0x3a, 0x6b, 0x0a, 0x76, 0xaf,
	0xfe, 0x24, 0xbd, 0x32, 0x29, 0x9e, 0x4b, 0x3b, 0xf2, 0x5c, 0xfd, 0x5e, 0x53, 0xb2, 0xae, 0xd9,
	0x6c, 0xd9, 0xf4, 0xf5, 0xd5, 0x57, 0x0a, 0xc3, 0xf5, 0xc6, 0xb8, 0x63, 0x5e, 0xec, 0x8c, 0x86,
	0x3f, 0x48, 0x40, 0x6d, 0x15, 0xa0, 0x48, 0xea, 0x45, 0xf0, 0xfe, 0xaa, 0xb8, 0x1f, 0xf1, 0x70,
	0xb8, 0x4d, 0x56, 0x63, 0x7a, 0x44, 0x5a, 0xb7, 0x54, 0xec, 0x1e, 0x11, 0xb4, 0x45, 0x7d, 0xd2,
	0xbc, 0x97, 0x76, 0xe8, 0x7d, 0xfe, 0xe9, 0x97, 0x40, 0x86, 0x5b, 0x85, 0xbf, 0xcc, 0x80, 0x0f,
	0xeb, 0xdf, 0xa4, 0xb0, 0xe3, 0x45, 0x45, 0x84, 0x8f, 0x32, 0xd5, 0x85, 0x44, 0x18, 0x91, 0xfa,
	0x1b, 0xb9, 0x5a, 0xa8, 0xca, 0xca, 0x5d, 0x69, 0x81, 0x21, 0x1f, 0xb3, 0x8a, 0xef, 0x52, 0xe4,
	0xd8, 0x94, 0x21, 0x72, 0x03, 0xe9, 0x8e, 0x83, 0x6a, 0x5a, 0x10, 0x7f, 0xf1, 0x22, 0xa3, 0xe2,
	0xfb, 0xd8, 0x65, 0xce, 0x3a, 0xc2, 0x6b, 0x36, 0x65, 0xd8, 0x44, 0x41, 0x34, 0x88, 0xbf, 0xdf,
	0x27, 0x50, 0xb4, 0xf6, 0x45, 0xba, 0x6b, 0x22, 0x9e, 0x5c, 0x0b, 0xf9, 0x98, 0x56, 0x1c, 0x46,
	0x91, 0x41, 0x5c, 0xa6, 0xdb, 0x6e, 0x70, 0xcb, 0xc5, 0x6b, 0xac, 0xf8, 0x6d, 0xbc, 0xce, 0xa7,
	0x31, 0xc2, 0x74, 0x07, 0x19, 0xa4, 0xe2, 0xb2, 0x9c, 0x4a, 0xc1, 0xd1, 0x33, 0xb6, 0x6b, 0x22,
	0x52, 0x61, 0xa8, 0x4c, 0x7c, 0x8c, 0xf4, 0x52, 0xf0, 0x2f, 0x5b, 0xc6, 0x88, 0xd7, 0x91, 0x4b,
	0x60, 0xdf, 0x27, 0x3e, 0x32, 0x88, 0x89, 0x29, 0x9c, 0x5f, 0x66, 0xcc, 0xa3, 0x73, 0x9a, 0x66,
	0xd9, 0x6c, 0xb9, 0x52, 0xca, 0x19, 0xa4, 0xac, 0x6d, 0x25, 0x41, 0xab, 0xb9, 0xaf, 0x95, 0x1c,
	0x52, 0xd2, 0x4c, 0xbc, 0x82, 0x1d, 0xe2, 0x69, 0x26, 0x31, 0x34, 0xc3, 0xb1, 0xb1, 0xcb, 0x72,
	0x65, 0xf3, 0xec, 0x3d, 0x09, 0x0c, 0x1c, 0x9b, 0x9c, 0x84, 0x77, 0x25, 0xb0, 0x77, 0xc1, 0x65,
	0xd8, 0x77, 0x75, 0x07, 0x5d, 0xc1, 0xfe, 0x0a, 0xf6, 0xd1, 0x97, 0x03, 0x5b, 0xaa, 0x03, 0xf6,
	0xe8, 0x9e, 0xe7, 0xd8, 0x06, 0x67, 0x45, 0xfb, 0x16, 0x25, 0x2e, 0xbc, 0xbe, 0x81, 0xd4, 0xc0,
	0x07, 0x75, 0x0e, 0x4d, 0x4e, 0x20, 0xb5, 0x8c, 0x29, 0xd5, 0xad, 0xe0, 0x4a, 0x0d, 0xfd, 0x33,
	0x31, 0x35, 0x7c, 0x9b, 0xef, 0x6f, 0x10, 0x5e, 0xd3, 0xcb, 0x9e, 0x83, 0x27, 0x10, 0xc5, 0x18,
	0x99, 0x98, 0xe9, 0xb6, 0x43, 0x51, 0xe4, 0x79, 0xc9, 0x66, 0x39, 0x67, 0x5d, 0x9b, 0x2e, 0x93,
	0xab, 0xce, 0xa5, 0x93, 0xea, 0xe6, 0xd9, 0xdb, 0x12, 0x18, 0x98, 0x99, 0x9c, 0x84, 0x1b, 0x60,
	0x68, 0x5e, 0x37, 0x51, 0xb4, 0x1e, 0x79, 0xa5, 0x4e, 0xdc, 0xfe, 0xe7, 0xff, 0x7e, 0xdc, 0x0f,
	0xe1, 0x9e, 0x58, 0x06, 0xc3, 0xb5, 0xea, 0xaf, 0x32, 0x60, 0x38, 0x61, 0xc9, 0x07, 0x3b, 0x5e,
	0xd5, 0xd5, 0x2d, 0x47, 0x95, 0xd9, 0x6e, 0xc5, 0x04, 0xb7, 0x3f, 0x97, 0xab, 0x85, 0xdb, 0xb2,
	0xb2, 0x92, 0x82, 0x2d, 0xe7, 0x11, 0xb1, 0x65, 0x9d, 0xf1, 0xcb, 0x06, 0x6a, 0x03, 0x06, 0x43,
	0x9c, 0x7b, 0x9c, 0xbe, 0x0d, 0x9c, 0x8e, 0xc2, 0xcf, 0x35, 0x72, 0xaa, 0x71, 0x02, 0xe0, 0x83,
	0x0c, 0xf8, 0xa0, 0x0e, 0x23, 0xa8, 0x75, 0xbe, 0x55, 0x0b, 0x09, 0xed, 0x7a, 0x6f, 0xa7, 0xfe,
	0x59, 0xae, 0x16, 0x7e, 0x26, 0x2b, 0xd5, 0x78, 0x4f, 0x0d, 0xc8, 0xa8, 0xef, 0xa5, 0xb1, 0xc6,
	0xc9, 0x69, 0xa9, 0xf5, 0xce, 0x18, 0x80, 0x21, 0x73, 0x7c, 0xb6, 0x41, 0x6c, 0x17, 0xd1, 0x8a,
	0xe7, 0x39, 0x21, 0x5c, 0x3e, 0xa6, 0x41, 0xe5, 0x4d, 0x3e, 0x10, 0x50, 0xeb, 0xfb, 0xdc, 0xbe,
	0x19, 0xca, 0x71, 0x83, 0x7e, 0x18, 0x02, 0x36, 0x91, 0x78, 0xa1, 0xf7, 0xc0, 0x7d, 0xbd, 0xc0,
	0x1d, 0x83, 0x4a, 0x13, 0xb8, 0x1b, 0xa2, 0x56, 0x9b, 0xf0, 0xfb, 0x19, 0x00, 0x9b, 0x37, 0xc4,
	0x70, 0xa6, 0xcb, 0xfd, 0x73, 0x88, 0xf1, 0xf6, 0x76, 0xdd, 0xea, 0x1d, 0xb9, 0x5a, 0x78, 0x36,
	0xa0, 0x9c, 0x6b, 0x8d, 0x72, 0x48, 0x71, 0x8f, 0xc1, 0x37, 0x91, 0x41, 0x15, 0xa2, 0x74, 0x06,
	0x45, 0x1b, 0x7d, 0x98, 0x01, 0x1f, 0x35, 0xed, 0xec, 0xe1, 0x74, 0x0b, 0xa4, 0xd2, 0x0e, 0x38,
	0x94, 0x99, 0xee, 0x84, 0x04, 0x86, 0x0f, 0xe4, 0x6a, 0xe1, 0x07, 0xb2, 0xf2, 0x9d, 0x94, 0xd7,
	0x7d, 0xc2, 0xfb, 0x3d, 0xd8, 0x82, 0x23, 0x91, 0x2a, 0x1a, 0xcc, 0x0b, 0xf0, 0xda, 0xea, 0xb6,
	0xbd, 0x97, 0xfe, 0x9b, 0xce, 0xed, 0x38, 0x3c, 0xd0, 0x8e, 0x5b, 0x2d, 0x3c, 0x35, 0xfa, 0x7b,
	0x06, 0xec, 0x69, 0x44, 0x0b, 0xe6, 0xbb, 0xe0, 0x30, 0x62, 0x77, 0xba, 0x2b, 0x19, 0x81, 0xee,
	0x3f, 0xe4, 0x6a, 0xe1, 0x47, 0x72, 0xac, 0x83, 0x72, 0x60, 0x62, 0x6d, 0x33, 0x4e, 0x6a, 0xb8,
	0x28, 0xa8, 0xed, 0xb2, 0x23, 0x6e, 0xeb, 0xdb, 0xed, 0xa7, 0x44, 0xe2, 0x5f, 0x04, 0x89, 0x8f,
	0x52, 0x49, 0xfc, 0x85, 0x94, 0x40, 0xc1, 0x7d, 0x69, 0x43, 0xf5, 0x09, 0x61, 0xea, 0xdc, 0x86,
	0xa0, 0x21, 0x3f, 0xa1, 0x8a, 0x0a, 0xab, 0x73, 0x5f, 0xfb, 0xc6, 0xc4, 0x16, 0x18, 0xaa, 0xef,
	0x19, 0xa1, 0xdb, 0x73, 0xdc, 0x6f, 0x74, 0x0a, 0x5d, 0x24, 0xec, 0x0c, 0xa9, 0xb8, 0x26, 0x87,
	0x05, 0x9d, 0xe2, 0x21, 0x96, 0xa9, 0x85, 0x2c, 0x7b, 0x05, 0xbb, 0xb1, 0x44, 0x4d, 0x21, 0x93,
	0x60, 0xea, 0x1e, 0x64, 0x61, 0x07, 0x40, 0x1c, 0x2f, 0x07, 0x33, 0x6c, 0xce, 0xa1, 0xe0, 0x61,
	0x76, 0x09, 0x43, 0x37, 0x02, 0x45, 0xea, 0xe6, 0x6b, 0xc4, 0xf0, 0x0c, 0xcc, 0x77, 0xc6, 0xb0,
	0xb6, 0x51, 0x0b, 0x75, 0x13, 0xfe, 0x2d, 0x03, 0x46, 0x92, 0xce, 0xdc, 0xe0, 0x6c, 0x27, 0x7c,
	0x36, 0x9f, 0x41, 0x2a, 0xc7, 0xbb, 0x96, 0x13, 0x6c, 0xff, 0x51, 0xae, 0x16, 0x7e, 0x28, 0x2b,
	0xdf, 0xed, 0xbc, 0x2d, 0x8b, 0x03, 0xb1, 0x5e, 0x67, 0x7e, 0x8b, 0x3b, 0xf3, 0x11, 0x78, 0xa8,
	0x2d, 0xd5, 0xb5, 0x23, 0xdd, 0xe7, 0x19, 0x30, 0x9c, 0xc0, 0x58, 0xcb, 0xf3, 0x84, 0xf4, 0xa3,
	0x6c, 0x65, 0xb6, 0x5b, 0x31, 0x41, 0xf2, 0x53, 0xb9, 0x5a, 0xf8, 0x89, 0xac, 0x5c, 0x4c, 0xed,
	0xd2, 0x0d, 0xe0, 0xf6, 0x1a, 0xf5, 0x3b, 0xd5, 0xa8, 0x8f, 0xc3, 0x63, 0x1d, 0x23, 0x5d, 0xd7,
	0xab, 0x9f, 0x64, 0xc0, 0xde, 0xc4, 0x13, 0x71, 0xd8, 0x51, 0xd3, 0x4d, 0xf8, 0x91, 0x40, 0x39,
	0xd1, 0xbd, 0xa0, 0x80, 0xfc, 0x4f, 0x72, 0xb5, 0x70, 0x4f, 0x56, 0x6e, 0x49, 0x9d, 0xf7, 0xeb,
	0xe8, 0xac, 0xba, 0xd7, 0xb0, 0xdf, 0xe2, 0x86, 0x3d, 0x01, 0x0f, 0xb7, 0xa5, 0x7b, 0xeb, 0x27,
	0x97, 0xff, 0xc6, 0x97, 0x1f, 0x31, 0xce, 0x3a, 0x5b, 0x7e, 0x34, 0xff, 0xe0, 0xa4, 0x1c, 0xef,
	0x5a, 0x4e, 0xf0, 0xfc, 0x4c, 0xae, 0x16, 0x7e, 0x2a, 0x2b, 0x97, 0x52, 0x9b, 0x76, 0x23, 0xbd,
	0xbd, 0xae, 0xfd, 0x4e, 0x75, 0xed, 0x13, 0x70, 0xb6, 0x73, 0xae, 0xeb, 0xda, 0xf6, 0xef, 0x65,
	0x30, 0x18, 0x7e, 0xc1, 0x01, 0xc7, 0x5b, 0xd1, 0x19, 0xff, 0x60, 0x44, 0x39, 0xd4, 0xc1, 0x4c,
	0x41, 0xee, 0xf3, 0x81, 0x6a, 0xe1, 0xd1, 0x80, 0x92, 0x8f, 0xba, 0xb0, 0xe8, 0xbc, 0x88, 0x7f,
	0x27, 0x82, 0x19, 0xf6, 0x9b, 0xd1, 0x2c, 0x13, 0xb3, 0xe2, 0xe0, 0x9c, 0xca, 0x40, 0x36, 0x0d,
	0xce, 0xf0, 0x2b, 0x13, 0xb8, 0xb4, 0x2d, 0x1a, 0xd7, 0x62, 0x03, 0xd4, 0xc3, 0x86, 0x36, 0x79,
	0xa2, 0x18, 0x2a, 0xec, 0xf5, 0xce, 0x16, 0x8c, 0x0d, 0xc3, 0x8f, 0xe2, 0x8c, 0x85, 0x5f, 0xfd,
	0x9c, 0x7b, 0xfc, 0x22, 0x2b, 0x3d, 0x79, 0x91, 0x95, 0xfe, 0xf3, 0x22, 0x2b, 0xdd, 0x7f, 0x99,
	0xed, 0x7b, 0xf2, 0x32, 0xdb, 0xf7, 0xaf, 0x97, 0xd9, 0xbe, 0xaf, 0x4e, 0xb5, 0xab, 0x49, 0xbc,
	0x0c, 0x6c, 0xdd, 0xc3, 0xb4, 0x34, 0xc8, 0x3f, 0x88, 0x9c, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x56, 0x3d, 0x30, 0x8b, 0xc9, 0x29, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Get all liquidity pools currently existed with each liquidity pool with batch and metadata
	LiquidityPools(ctx context.Context, in *QueryLiquidityPoolsRequest, opts ...grpc.CallOption) (*QueryLiquidityPoolsResponse, error)
	// Get all liquidity pools batch
	LiquidityPoolsBatch(ctx context.Context, in *QueryLiquidityPoolsBatchRequest, opts ...grpc.CallOption) (*QueryLiquidityPoolsBatchResponse, error)
	// Get a liquidity pool with liquidity pool batch by pool_id
	LiquidityPool(ctx context.Context, in *QueryLiquidityPoolRequest, opts ...grpc.CallOption) (*QueryLiquidityPoolResponse, error)
	// Get a liquidity pool batch by pool_id
	LiquidityPoolBatch(ctx context.Context, in *QueryLiquidityPoolBatchRequest, opts ...grpc.CallOption) (*QueryLiquidityPoolBatchResponse, error)
	// Get all pool batch swap messages of the liquidity pool
	PoolBatchSwapMsgs(ctx context.Context, in *QueryPoolBatchSwapMsgsRequest, opts ...grpc.CallOption) (*QueryPoolBatchSwapMsgsResponse, error)
	// Get the pool batch swap message with msg_index of the liquidity pool
	PoolBatchSwapMsg(ctx context.Context, in *QueryPoolBatchSwapMsgRequest, opts ...grpc.CallOption) (*QueryPoolBatchSwapMsgResponse, error)
	// Get all pool batch deposit messages of the liquidity pool
	PoolBatchDepositMsgs(ctx context.Context, in *QueryPoolBatchDepositMsgsRequest, opts ...grpc.CallOption) (*QueryPoolBatchDepositMsgsResponse, error)
	// Get the pool batch deposit message with msg_index of the liquidity pool
	PoolBatchDepositMsg(ctx context.Context, in *QueryPoolBatchDepositMsgRequest, opts ...grpc.CallOption) (*QueryPoolBatchDepositMsgResponse, error)
	// Get all pool batch withdraw messages of the liquidity pool
	PoolBatchWithdrawMsgs(ctx context.Context, in *QueryPoolBatchWithdrawMsgsRequest, opts ...grpc.CallOption) (*QueryPoolBatchWithdrawMsgsResponse, error)
	// Get the pool batch withdraw message with msg_index of the liquidity pool
	PoolBatchWithdrawMsg(ctx context.Context, in *QueryPoolBatchWithdrawMsgRequest, opts ...grpc.CallOption) (*QueryPoolBatchWithdrawMsgResponse, error)
	// Parameters queries the liquidity parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) LiquidityPools(ctx context.Context, in *QueryLiquidityPoolsRequest, opts ...grpc.CallOption) (*QueryLiquidityPoolsResponse, error) {
	out := new(QueryLiquidityPoolsResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.Query/LiquidityPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityPoolsBatch(ctx context.Context, in *QueryLiquidityPoolsBatchRequest, opts ...grpc.CallOption) (*QueryLiquidityPoolsBatchResponse, error) {
	out := new(QueryLiquidityPoolsBatchResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.Query/LiquidityPoolsBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityPool(ctx context.Context, in *QueryLiquidityPoolRequest, opts ...grpc.CallOption) (*QueryLiquidityPoolResponse, error) {
	out := new(QueryLiquidityPoolResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.Query/LiquidityPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityPoolBatch(ctx context.Context, in *QueryLiquidityPoolBatchRequest, opts ...grpc.CallOption) (*QueryLiquidityPoolBatchResponse, error) {
	out := new(QueryLiquidityPoolBatchResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.Query/LiquidityPoolBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolBatchSwapMsgs(ctx context.Context, in *QueryPoolBatchSwapMsgsRequest, opts ...grpc.CallOption) (*QueryPoolBatchSwapMsgsResponse, error) {
	out := new(QueryPoolBatchSwapMsgsResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.Query/PoolBatchSwapMsgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolBatchSwapMsg(ctx context.Context, in *QueryPoolBatchSwapMsgRequest, opts ...grpc.CallOption) (*QueryPoolBatchSwapMsgResponse, error) {
	out := new(QueryPoolBatchSwapMsgResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.Query/PoolBatchSwapMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolBatchDepositMsgs(ctx context.Context, in *QueryPoolBatchDepositMsgsRequest, opts ...grpc.CallOption) (*QueryPoolBatchDepositMsgsResponse, error) {
	out := new(QueryPoolBatchDepositMsgsResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.Query/PoolBatchDepositMsgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolBatchDepositMsg(ctx context.Context, in *QueryPoolBatchDepositMsgRequest, opts ...grpc.CallOption) (*QueryPoolBatchDepositMsgResponse, error) {
	out := new(QueryPoolBatchDepositMsgResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.Query/PoolBatchDepositMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolBatchWithdrawMsgs(ctx context.Context, in *QueryPoolBatchWithdrawMsgsRequest, opts ...grpc.CallOption) (*QueryPoolBatchWithdrawMsgsResponse, error) {
	out := new(QueryPoolBatchWithdrawMsgsResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.Query/PoolBatchWithdrawMsgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolBatchWithdrawMsg(ctx context.Context, in *QueryPoolBatchWithdrawMsgRequest, opts ...grpc.CallOption) (*QueryPoolBatchWithdrawMsgResponse, error) {
	out := new(QueryPoolBatchWithdrawMsgResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.Query/PoolBatchWithdrawMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Get all liquidity pools currently existed with each liquidity pool with batch and metadata
	LiquidityPools(context.Context, *QueryLiquidityPoolsRequest) (*QueryLiquidityPoolsResponse, error)
	// Get all liquidity pools batch
	LiquidityPoolsBatch(context.Context, *QueryLiquidityPoolsBatchRequest) (*QueryLiquidityPoolsBatchResponse, error)
	// Get a liquidity pool with liquidity pool batch by pool_id
	LiquidityPool(context.Context, *QueryLiquidityPoolRequest) (*QueryLiquidityPoolResponse, error)
	// Get a liquidity pool batch by pool_id
	LiquidityPoolBatch(context.Context, *QueryLiquidityPoolBatchRequest) (*QueryLiquidityPoolBatchResponse, error)
	// Get all pool batch swap messages of the liquidity pool
	PoolBatchSwapMsgs(context.Context, *QueryPoolBatchSwapMsgsRequest) (*QueryPoolBatchSwapMsgsResponse, error)
	// Get the pool batch swap message with msg_index of the liquidity pool
	PoolBatchSwapMsg(context.Context, *QueryPoolBatchSwapMsgRequest) (*QueryPoolBatchSwapMsgResponse, error)
	// Get all pool batch deposit messages of the liquidity pool
	PoolBatchDepositMsgs(context.Context, *QueryPoolBatchDepositMsgsRequest) (*QueryPoolBatchDepositMsgsResponse, error)
	// Get the pool batch deposit message with msg_index of the liquidity pool
	PoolBatchDepositMsg(context.Context, *QueryPoolBatchDepositMsgRequest) (*QueryPoolBatchDepositMsgResponse, error)
	// Get all pool batch withdraw messages of the liquidity pool
	PoolBatchWithdrawMsgs(context.Context, *QueryPoolBatchWithdrawMsgsRequest) (*QueryPoolBatchWithdrawMsgsResponse, error)
	// Get the pool batch withdraw message with msg_index of the liquidity pool
	PoolBatchWithdrawMsg(context.Context, *QueryPoolBatchWithdrawMsgRequest) (*QueryPoolBatchWithdrawMsgResponse, error)
	// Parameters queries the liquidity parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) LiquidityPools(ctx context.Context, req *QueryLiquidityPoolsRequest) (*QueryLiquidityPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityPools not implemented")
}
func (*UnimplementedQueryServer) LiquidityPoolsBatch(ctx context.Context, req *QueryLiquidityPoolsBatchRequest) (*QueryLiquidityPoolsBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityPoolsBatch not implemented")
}
func (*UnimplementedQueryServer) LiquidityPool(ctx context.Context, req *QueryLiquidityPoolRequest) (*QueryLiquidityPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityPool not implemented")
}
func (*UnimplementedQueryServer) LiquidityPoolBatch(ctx context.Context, req *QueryLiquidityPoolBatchRequest) (*QueryLiquidityPoolBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityPoolBatch not implemented")
}
func (*UnimplementedQueryServer) PoolBatchSwapMsgs(ctx context.Context, req *QueryPoolBatchSwapMsgsRequest) (*QueryPoolBatchSwapMsgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolBatchSwapMsgs not implemented")
}
func (*UnimplementedQueryServer) PoolBatchSwapMsg(ctx context.Context, req *QueryPoolBatchSwapMsgRequest) (*QueryPoolBatchSwapMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolBatchSwapMsg not implemented")
}
func (*UnimplementedQueryServer) PoolBatchDepositMsgs(ctx context.Context, req *QueryPoolBatchDepositMsgsRequest) (*QueryPoolBatchDepositMsgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolBatchDepositMsgs not implemented")
}
func (*UnimplementedQueryServer) PoolBatchDepositMsg(ctx context.Context, req *QueryPoolBatchDepositMsgRequest) (*QueryPoolBatchDepositMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolBatchDepositMsg not implemented")
}
func (*UnimplementedQueryServer) PoolBatchWithdrawMsgs(ctx context.Context, req *QueryPoolBatchWithdrawMsgsRequest) (*QueryPoolBatchWithdrawMsgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolBatchWithdrawMsgs not implemented")
}
func (*UnimplementedQueryServer) PoolBatchWithdrawMsg(ctx context.Context, req *QueryPoolBatchWithdrawMsgRequest) (*QueryPoolBatchWithdrawMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolBatchWithdrawMsg not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_LiquidityPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.Query/LiquidityPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityPools(ctx, req.(*QueryLiquidityPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityPoolsBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityPoolsBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityPoolsBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.Query/LiquidityPoolsBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityPoolsBatch(ctx, req.(*QueryLiquidityPoolsBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.Query/LiquidityPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityPool(ctx, req.(*QueryLiquidityPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityPoolBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityPoolBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityPoolBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.Query/LiquidityPoolBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityPoolBatch(ctx, req.(*QueryLiquidityPoolBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolBatchSwapMsgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolBatchSwapMsgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolBatchSwapMsgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.Query/PoolBatchSwapMsgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolBatchSwapMsgs(ctx, req.(*QueryPoolBatchSwapMsgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolBatchSwapMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolBatchSwapMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolBatchSwapMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.Query/PoolBatchSwapMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolBatchSwapMsg(ctx, req.(*QueryPoolBatchSwapMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolBatchDepositMsgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolBatchDepositMsgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolBatchDepositMsgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.Query/PoolBatchDepositMsgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolBatchDepositMsgs(ctx, req.(*QueryPoolBatchDepositMsgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolBatchDepositMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolBatchDepositMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolBatchDepositMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.Query/PoolBatchDepositMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolBatchDepositMsg(ctx, req.(*QueryPoolBatchDepositMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolBatchWithdrawMsgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolBatchWithdrawMsgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolBatchWithdrawMsgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.Query/PoolBatchWithdrawMsgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolBatchWithdrawMsgs(ctx, req.(*QueryPoolBatchWithdrawMsgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolBatchWithdrawMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolBatchWithdrawMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolBatchWithdrawMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.Query/PoolBatchWithdrawMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolBatchWithdrawMsg(ctx, req.(*QueryPoolBatchWithdrawMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tendermint.liquidity.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LiquidityPools",
			Handler:    _Query_LiquidityPools_Handler,
		},
		{
			MethodName: "LiquidityPoolsBatch",
			Handler:    _Query_LiquidityPoolsBatch_Handler,
		},
		{
			MethodName: "LiquidityPool",
			Handler:    _Query_LiquidityPool_Handler,
		},
		{
			MethodName: "LiquidityPoolBatch",
			Handler:    _Query_LiquidityPoolBatch_Handler,
		},
		{
			MethodName: "PoolBatchSwapMsgs",
			Handler:    _Query_PoolBatchSwapMsgs_Handler,
		},
		{
			MethodName: "PoolBatchSwapMsg",
			Handler:    _Query_PoolBatchSwapMsg_Handler,
		},
		{
			MethodName: "PoolBatchDepositMsgs",
			Handler:    _Query_PoolBatchDepositMsgs_Handler,
		},
		{
			MethodName: "PoolBatchDepositMsg",
			Handler:    _Query_PoolBatchDepositMsg_Handler,
		},
		{
			MethodName: "PoolBatchWithdrawMsgs",
			Handler:    _Query_PoolBatchWithdrawMsgs_Handler,
		},
		{
			MethodName: "PoolBatchWithdrawMsg",
			Handler:    _Query_PoolBatchWithdrawMsg_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query.proto",
}

func (m *QueryLiquidityPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LiquidityPoolBatch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.LiquidityPoolMetadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.LiquidityPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityPoolBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityPoolBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityPoolBatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityPoolBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityPoolBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityPoolBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityPoolsBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityPoolsBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityPoolsBatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityPoolsBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityPoolsBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityPoolsBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolsBatch) > 0 {
		for iNdEx := len(m.PoolsBatch) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolsBatch[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPoolBatchSwapMsgsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolBatchSwapMsgsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolBatchSwapMsgsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolBatchSwapMsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolBatchSwapMsgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolBatchSwapMsgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MsgIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolBatchSwapMsgsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolBatchSwapMsgsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolBatchSwapMsgsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Swaps) > 0 {
		for iNdEx := len(m.Swaps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Swaps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolBatchSwapMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolBatchSwapMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolBatchSwapMsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Swaps.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPoolBatchDepositMsgsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolBatchDepositMsgsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolBatchDepositMsgsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolBatchDepositMsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolBatchDepositMsgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolBatchDepositMsgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MsgIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolBatchDepositMsgsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolBatchDepositMsgsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolBatchDepositMsgsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolBatchDepositMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolBatchDepositMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolBatchDepositMsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Deposits.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPoolBatchWithdrawMsgsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolBatchWithdrawMsgsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolBatchWithdrawMsgsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolBatchWithdrawMsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolBatchWithdrawMsgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolBatchWithdrawMsgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MsgIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolBatchWithdrawMsgsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolBatchWithdrawMsgsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolBatchWithdrawMsgsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Withdraws) > 0 {
		for iNdEx := len(m.Withdraws) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Withdraws[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolBatchWithdrawMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolBatchWithdrawMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolBatchWithdrawMsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Withdraws.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryLiquidityPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryLiquidityPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LiquidityPool.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LiquidityPoolMetadata.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LiquidityPoolBatch.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLiquidityPoolBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryLiquidityPoolBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Batch.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLiquidityPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidityPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidityPoolsBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidityPoolsBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolsBatch) > 0 {
		for _, e := range m.PoolsBatch {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoolBatchSwapMsgsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolBatchSwapMsgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.MsgIndex != 0 {
		n += 1 + sovQuery(uint64(m.MsgIndex))
	}
	return n
}

func (m *QueryPoolBatchSwapMsgsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Swaps) > 0 {
		for _, e := range m.Swaps {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolBatchSwapMsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Swaps.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoolBatchDepositMsgsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolBatchDepositMsgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.MsgIndex != 0 {
		n += 1 + sovQuery(uint64(m.MsgIndex))
	}
	return n
}

func (m *QueryPoolBatchDepositMsgsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolBatchDepositMsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Deposits.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoolBatchWithdrawMsgsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolBatchWithdrawMsgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.MsgIndex != 0 {
		n += 1 + sovQuery(uint64(m.MsgIndex))
	}
	return n
}

func (m *QueryPoolBatchWithdrawMsgsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Withdraws) > 0 {
		for _, e := range m.Withdraws {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolBatchWithdrawMsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Withdraws.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryLiquidityPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidityPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityPoolMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidityPoolMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityPoolBatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidityPoolBatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityPoolBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityPoolBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityPoolBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityPoolBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityPoolBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityPoolBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, QueryLiquidityPoolResponse{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityPoolsBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityPoolsBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityPoolsBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityPoolsBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityPoolsBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityPoolsBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolsBatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolsBatch = append(m.PoolsBatch, QueryLiquidityPoolBatchResponse{})
			if err := m.PoolsBatch[len(m.PoolsBatch)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolBatchSwapMsgsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolBatchSwapMsgsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolBatchSwapMsgsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolBatchSwapMsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolBatchSwapMsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolBatchSwapMsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIndex", wireType)
			}
			m.MsgIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolBatchSwapMsgsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolBatchSwapMsgsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolBatchSwapMsgsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Swaps = append(m.Swaps, BatchPoolSwapMsg{})
			if err := m.Swaps[len(m.Swaps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolBatchSwapMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolBatchSwapMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolBatchSwapMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Swaps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolBatchDepositMsgsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolBatchDepositMsgsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolBatchDepositMsgsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolBatchDepositMsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolBatchDepositMsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolBatchDepositMsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIndex", wireType)
			}
			m.MsgIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolBatchDepositMsgsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolBatchDepositMsgsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolBatchDepositMsgsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, BatchPoolDepositMsg{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolBatchDepositMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolBatchDepositMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolBatchDepositMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolBatchWithdrawMsgsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolBatchWithdrawMsgsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolBatchWithdrawMsgsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolBatchWithdrawMsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolBatchWithdrawMsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolBatchWithdrawMsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIndex", wireType)
			}
			m.MsgIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolBatchWithdrawMsgsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolBatchWithdrawMsgsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolBatchWithdrawMsgsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdraws = append(m.Withdraws, BatchPoolWithdrawMsg{})
			if err := m.Withdraws[len(m.Withdraws)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolBatchWithdrawMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolBatchWithdrawMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolBatchWithdrawMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Withdraws.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
