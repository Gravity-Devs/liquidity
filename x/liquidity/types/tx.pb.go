// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateLiquidityPool defines an sdk.Msg type that supports submitting create liquidity pool
type MsgCreateLiquidityPool struct {
	PoolCreatorAddress string `protobuf:"bytes,1,opt,name=pool_creator_address,json=poolCreatorAddress,proto3" json:"pool_creator_address,omitempty" yaml:"pool_creator_address"`
	// index of target pool type, only 1 is allowed on this version, Must match the value in the pool.
	PoolTypeIndex uint32 `protobuf:"varint,2,opt,name=pool_type_index,json=poolTypeIndex,proto3" json:"pool_type_index,omitempty" yaml:"pool_type_index"`
	// denoms of reserve coin pair of the pool
	ReserveCoinDenoms []string `protobuf:"bytes,3,rep,name=reserve_coin_denoms,json=reserveCoinDenoms,proto3" json:"reserve_coin_denoms,omitempty" yaml:"reserve_coin_denoms"`
	// reserve coin pair of the pool to deposit
	DepositCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=deposit_coins,json=depositCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"deposit_coins" yaml:"deposit_coins"`
}

func (m *MsgCreateLiquidityPool) Reset()         { *m = MsgCreateLiquidityPool{} }
func (m *MsgCreateLiquidityPool) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLiquidityPool) ProtoMessage()    {}
func (*MsgCreateLiquidityPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{0}
}
func (m *MsgCreateLiquidityPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLiquidityPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLiquidityPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLiquidityPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLiquidityPool.Merge(m, src)
}
func (m *MsgCreateLiquidityPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLiquidityPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLiquidityPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLiquidityPool proto.InternalMessageInfo

// MsgCreateLiquidityPoolRequest is the request type for the Msg/MsgCreateLiquidityPoolRequest RPC method.
type MsgCreateLiquidityPoolRequest struct {
	BaseReq *BaseReq `protobuf:"bytes,1,opt,name=base_req,json=baseReq,proto3" json:"base_req,omitempty"`
	// MsgCreateLiquidityPool
	Msg *MsgCreateLiquidityPool `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *MsgCreateLiquidityPoolRequest) Reset()         { *m = MsgCreateLiquidityPoolRequest{} }
func (m *MsgCreateLiquidityPoolRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLiquidityPoolRequest) ProtoMessage()    {}
func (*MsgCreateLiquidityPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{1}
}
func (m *MsgCreateLiquidityPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLiquidityPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLiquidityPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLiquidityPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLiquidityPoolRequest.Merge(m, src)
}
func (m *MsgCreateLiquidityPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLiquidityPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLiquidityPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLiquidityPoolRequest proto.InternalMessageInfo

func (m *MsgCreateLiquidityPoolRequest) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *MsgCreateLiquidityPoolRequest) GetMsg() *MsgCreateLiquidityPool {
	if m != nil {
		return m.Msg
	}
	return nil
}

// MsgCreateLiquidityPoolResponse defines the Msg/CreateLiquidityPool response type.
type MsgCreateLiquidityPoolResponse struct {
	StdTx *StdTx `protobuf:"bytes,1,opt,name=std_tx,json=stdTx,proto3" json:"std_tx,omitempty" yaml:"std_tx"`
}

func (m *MsgCreateLiquidityPoolResponse) Reset()         { *m = MsgCreateLiquidityPoolResponse{} }
func (m *MsgCreateLiquidityPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLiquidityPoolResponse) ProtoMessage()    {}
func (*MsgCreateLiquidityPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{2}
}
func (m *MsgCreateLiquidityPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLiquidityPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLiquidityPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLiquidityPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLiquidityPoolResponse.Merge(m, src)
}
func (m *MsgCreateLiquidityPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLiquidityPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLiquidityPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLiquidityPoolResponse proto.InternalMessageInfo

func (m *MsgCreateLiquidityPoolResponse) GetStdTx() *StdTx {
	if m != nil {
		return m.StdTx
	}
	return nil
}

// `MsgDepositToLiquidityPool defines` an `sdk.Msg` type that supports submitting deposit request to the batch of the liquidity pool
// Deposit submit to the batch of the Liquidity pool with the specified `pool_id`, deposit coins for reserve
// this requests are stacked in the batch of the liquidity pool, not immediately processed and
// processed in the `endblock` at once with other requests.
//
// See: https://github.com/tendermint/liquidity/blob/develop/x/liquidity/spec/04_messages.md
type MsgDepositToLiquidityPool struct {
	// The publisher in which to create the book.
	//
	// Format: `publishers/{publisher}`
	//
	// Example: `publishers/1257894000000000000`
	DepositorAddress string `protobuf:"bytes,1,opt,name=depositor_address,json=depositorAddress,proto3" json:"depositor_address,omitempty" yaml:"depositor_address"`
	// id of the target pool
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id" yaml:"pool_id"`
	// reserve coin pair of the pool to deposit
	DepositCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=deposit_coins,json=depositCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"deposit_coins" yaml:"deposit_coins"`
}

func (m *MsgDepositToLiquidityPool) Reset()         { *m = MsgDepositToLiquidityPool{} }
func (m *MsgDepositToLiquidityPool) String() string { return proto.CompactTextString(m) }
func (*MsgDepositToLiquidityPool) ProtoMessage()    {}
func (*MsgDepositToLiquidityPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{3}
}
func (m *MsgDepositToLiquidityPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositToLiquidityPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositToLiquidityPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositToLiquidityPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositToLiquidityPool.Merge(m, src)
}
func (m *MsgDepositToLiquidityPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositToLiquidityPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositToLiquidityPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositToLiquidityPool proto.InternalMessageInfo

// MsgDepositToLiquidityPoolRequest is the request type for the Msg/DepositToLiquidityPool RPC method.
type MsgDepositToLiquidityPoolRequest struct {
	BaseReq *BaseReq `protobuf:"bytes,1,opt,name=base_req,json=baseReq,proto3" json:"base_req,omitempty"`
	// id of the target pool
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id" yaml:"pool_id"`
	// MsgDepositToLiquidityPool
	Msg *MsgDepositToLiquidityPool `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *MsgDepositToLiquidityPoolRequest) Reset()         { *m = MsgDepositToLiquidityPoolRequest{} }
func (m *MsgDepositToLiquidityPoolRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDepositToLiquidityPoolRequest) ProtoMessage()    {}
func (*MsgDepositToLiquidityPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{4}
}
func (m *MsgDepositToLiquidityPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositToLiquidityPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositToLiquidityPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositToLiquidityPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositToLiquidityPoolRequest.Merge(m, src)
}
func (m *MsgDepositToLiquidityPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositToLiquidityPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositToLiquidityPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositToLiquidityPoolRequest proto.InternalMessageInfo

func (m *MsgDepositToLiquidityPoolRequest) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *MsgDepositToLiquidityPoolRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgDepositToLiquidityPoolRequest) GetMsg() *MsgDepositToLiquidityPool {
	if m != nil {
		return m.Msg
	}
	return nil
}

// MsgDepositToLiquidityPoolResponse defines the Msg/DepositToLiquidityPool response type.
type MsgDepositToLiquidityPoolResponse struct {
	StdTx *StdTx `protobuf:"bytes,1,opt,name=std_tx,json=stdTx,proto3" json:"std_tx,omitempty" yaml:"std_tx"`
}

func (m *MsgDepositToLiquidityPoolResponse) Reset()         { *m = MsgDepositToLiquidityPoolResponse{} }
func (m *MsgDepositToLiquidityPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositToLiquidityPoolResponse) ProtoMessage()    {}
func (*MsgDepositToLiquidityPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{5}
}
func (m *MsgDepositToLiquidityPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositToLiquidityPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositToLiquidityPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositToLiquidityPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositToLiquidityPoolResponse.Merge(m, src)
}
func (m *MsgDepositToLiquidityPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositToLiquidityPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositToLiquidityPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositToLiquidityPoolResponse proto.InternalMessageInfo

func (m *MsgDepositToLiquidityPoolResponse) GetStdTx() *StdTx {
	if m != nil {
		return m.StdTx
	}
	return nil
}

// `MsgWithdrawFromLiquidityPool` defines an `sdk.Msg` type that supports submitting withdraw request to the batch of the liquidity pool
// Withdraw submit to the batch from the Liquidity pool with the specified `pool_id`, `pool_coin` of the pool
// this requests are stacked in the batch of the liquidity pool, not immediately processed and
// processed in the `endblock` at once with other requests.
//
// See: https://github.com/tendermint/liquidity/blob/develop/x/liquidity/spec/04_messages.md
type MsgWithdrawFromLiquidityPool struct {
	WithdrawerAddress string `protobuf:"bytes,1,opt,name=withdrawer_address,json=withdrawerAddress,proto3" json:"withdrawer_address,omitempty" yaml:"withdrawer_address"`
	// id of the target pool
	PoolId   uint64     `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id" yaml:"pool_id"`
	PoolCoin types.Coin `protobuf:"bytes,3,opt,name=pool_coin,json=poolCoin,proto3" json:"pool_coin" yaml:"pool_coin"`
}

func (m *MsgWithdrawFromLiquidityPool) Reset()         { *m = MsgWithdrawFromLiquidityPool{} }
func (m *MsgWithdrawFromLiquidityPool) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawFromLiquidityPool) ProtoMessage()    {}
func (*MsgWithdrawFromLiquidityPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{6}
}
func (m *MsgWithdrawFromLiquidityPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawFromLiquidityPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawFromLiquidityPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawFromLiquidityPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawFromLiquidityPool.Merge(m, src)
}
func (m *MsgWithdrawFromLiquidityPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawFromLiquidityPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawFromLiquidityPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawFromLiquidityPool proto.InternalMessageInfo

// MsgWithdrawFromLiquidityPoolRequest is the request type for the Query/WithdrawFromLiquidityPool RPC method.
type MsgWithdrawFromLiquidityPoolRequest struct {
	BaseReq *BaseReq `protobuf:"bytes,1,opt,name=base_req,json=baseReq,proto3" json:"base_req,omitempty"`
	// id of the target pool
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id" yaml:"pool_id"`
	// MsgWithdrawFromLiquidityPool
	Msg *MsgWithdrawFromLiquidityPool `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *MsgWithdrawFromLiquidityPoolRequest) Reset()         { *m = MsgWithdrawFromLiquidityPoolRequest{} }
func (m *MsgWithdrawFromLiquidityPoolRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawFromLiquidityPoolRequest) ProtoMessage()    {}
func (*MsgWithdrawFromLiquidityPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{7}
}
func (m *MsgWithdrawFromLiquidityPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawFromLiquidityPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawFromLiquidityPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawFromLiquidityPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawFromLiquidityPoolRequest.Merge(m, src)
}
func (m *MsgWithdrawFromLiquidityPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawFromLiquidityPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawFromLiquidityPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawFromLiquidityPoolRequest proto.InternalMessageInfo

func (m *MsgWithdrawFromLiquidityPoolRequest) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *MsgWithdrawFromLiquidityPoolRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgWithdrawFromLiquidityPoolRequest) GetMsg() *MsgWithdrawFromLiquidityPool {
	if m != nil {
		return m.Msg
	}
	return nil
}

// MsgWithdrawFromLiquidityPoolResponse defines the Msg/WithdrawFromLiquidityPool response type.
type MsgWithdrawFromLiquidityPoolResponse struct {
	StdTx *StdTx `protobuf:"bytes,1,opt,name=std_tx,json=stdTx,proto3" json:"std_tx,omitempty" yaml:"std_tx"`
}

func (m *MsgWithdrawFromLiquidityPoolResponse) Reset()         { *m = MsgWithdrawFromLiquidityPoolResponse{} }
func (m *MsgWithdrawFromLiquidityPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawFromLiquidityPoolResponse) ProtoMessage()    {}
func (*MsgWithdrawFromLiquidityPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{8}
}
func (m *MsgWithdrawFromLiquidityPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawFromLiquidityPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawFromLiquidityPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawFromLiquidityPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawFromLiquidityPoolResponse.Merge(m, src)
}
func (m *MsgWithdrawFromLiquidityPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawFromLiquidityPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawFromLiquidityPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawFromLiquidityPoolResponse proto.InternalMessageInfo

func (m *MsgWithdrawFromLiquidityPoolResponse) GetStdTx() *StdTx {
	if m != nil {
		return m.StdTx
	}
	return nil
}

// `MsgSwap` defines an sdk.Msg type that supports submitting swap offer request to the batch of the liquidity pool
// Swap offer to the Liquidity pool with the specified `pool_id`, `pool_type_index`, `swap_type`,
// `demand_coin_denom` with the coin and the price you're offering
// this requests are stacked in the batch of the liquidity pool, not immediately processed and
// processed in the `endblock` at once with other requests
// You should request the same each field as the pool
// Currently, only the default `swap_type`1 is available on this version
// The detailed swap algorithm can be found here.
//
// See: https://github.com/tendermint/liquidity/tree/develop/doc
// https://github.com/tendermint/liquidity/blob/develop/x/liquidity/spec/04_messages.md
type MsgSwap struct {
	// address of swap requester
	SwapRequesterAddress string `protobuf:"bytes,1,opt,name=swap_requester_address,json=swapRequesterAddress,proto3" json:"swap_requester_address,omitempty" yaml:"swap_requester_address"`
	// id of the target pool
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id" yaml:"pool_id"`
	// index of target pool type, only 1 is allowed on this version, Must match the value in the pool.
	PoolTypeIndex uint32 `protobuf:"varint,3,opt,name=pool_type_index,json=poolTypeIndex,proto3" json:"pool_type_index,omitempty" yaml:"pool_type_index"`
	// id of swap type type, only 1 is allowed on this version, Must match the value in the pool.
	SwapType uint32 `protobuf:"varint,4,opt,name=swap_type,json=swapType,proto3" json:"swap_type,omitempty" yaml:"swap_type"`
	// offer sdk.coin for the swap request, Must match the denom in the pool.
	OfferCoin types.Coin `protobuf:"bytes,5,opt,name=offer_coin,json=offerCoin,proto3" json:"offer_coin" yaml:"offer_coin"`
	// denom of demand coin to be exchanged on the swap request, Must match the denom in the pool.
	DemandCoinDenom string `protobuf:"bytes,6,opt,name=demand_coin_denom,json=demandCoinDenom,proto3" json:"demand_coin_denom,omitempty" yaml:"demand_coin_denom"`
	// limit order price for this offer
	OrderPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=order_price,json=orderPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"order_price" yaml:"order_price"`
}

func (m *MsgSwap) Reset()         { *m = MsgSwap{} }
func (m *MsgSwap) String() string { return proto.CompactTextString(m) }
func (*MsgSwap) ProtoMessage()    {}
func (*MsgSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{9}
}
func (m *MsgSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwap.Merge(m, src)
}
func (m *MsgSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwap proto.InternalMessageInfo

// MsgSwapRequest is the request type for the Query/Swap RPC method.
type MsgSwapRequest struct {
	BaseReq *BaseReq `protobuf:"bytes,1,opt,name=base_req,json=baseReq,proto3" json:"base_req,omitempty"`
	// id of the target pool
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id" yaml:"pool_id"`
	// MsgSwap
	Msg *MsgSwap `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *MsgSwapRequest) Reset()         { *m = MsgSwapRequest{} }
func (m *MsgSwapRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSwapRequest) ProtoMessage()    {}
func (*MsgSwapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{10}
}
func (m *MsgSwapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapRequest.Merge(m, src)
}
func (m *MsgSwapRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapRequest proto.InternalMessageInfo

func (m *MsgSwapRequest) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *MsgSwapRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgSwapRequest) GetMsg() *MsgSwap {
	if m != nil {
		return m.Msg
	}
	return nil
}

// MsgSwapResponse defines the Msg/Swap response type.
type MsgSwapResponse struct {
	StdTx *StdTx `protobuf:"bytes,1,opt,name=std_tx,json=stdTx,proto3" json:"std_tx,omitempty" yaml:"std_tx"`
}

func (m *MsgSwapResponse) Reset()         { *m = MsgSwapResponse{} }
func (m *MsgSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSwapResponse) ProtoMessage()    {}
func (*MsgSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{11}
}
func (m *MsgSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapResponse.Merge(m, src)
}
func (m *MsgSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapResponse proto.InternalMessageInfo

func (m *MsgSwapResponse) GetStdTx() *StdTx {
	if m != nil {
		return m.StdTx
	}
	return nil
}

// Base Request struct for Post Tx, standard of tendermint/cosmos-sdk
type BaseReq struct {
	// Sender address or Keybase name to generate a transaction
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	// Memo to send along with transaction
	Memo string `protobuf:"bytes,2,opt,name=memo,proto3" json:"memo,omitempty" yaml:"memo"`
	// Name or address of private key with which to sign
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// The account number of the signing account (offline mode only)
	AccountNumber uint64 `protobuf:"varint,4,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty" yaml:"account_number"`
	// The sequence number of the signing account (offline mode only)
	Sequence uint64 `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty" yaml:"sequence"`
	// Set a block timeout height to prevent the tx from being committed past a certain height
	TimeoutHeight uint64 `protobuf:"varint,6,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height,omitempty" yaml:"timeout_height"`
	// Fees to pay along with transaction
	Fees github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=fees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fees"`
	// Gas prices in decimal format to determine the transaction fee
	GasPrices github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,8,rep,name=gas_prices,json=gasPrices,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"gas_prices" yaml:"gas_prices"`
	// Gas amount to determine the transaction fee
	Gas uint64 `protobuf:"varint,9,opt,name=gas,proto3" json:"gas,omitempty" yaml:"gas"`
	// adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored
	GasAdjustment string `protobuf:"bytes,10,opt,name=gas_adjustment,json=gasAdjustment,proto3" json:"gas_adjustment,omitempty" yaml:"gas_adjustment"`
	// Estimate gas for a transaction (cannot be used in conjunction with generate_only)
	Simulate bool `protobuf:"varint,11,opt,name=simulate,proto3" json:"simulate,omitempty" yaml:"simulate"`
}

func (m *BaseReq) Reset()         { *m = BaseReq{} }
func (m *BaseReq) String() string { return proto.CompactTextString(m) }
func (*BaseReq) ProtoMessage()    {}
func (*BaseReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{12}
}
func (m *BaseReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseReq.Merge(m, src)
}
func (m *BaseReq) XXX_Size() int {
	return m.Size()
}
func (m *BaseReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseReq.DiscardUnknown(m)
}

var xxx_messageInfo_BaseReq proto.InternalMessageInfo

// Fee struct of cosmos-sdk
type Fee struct {
	Gas uint64 `protobuf:"varint,1,opt,name=gas,proto3" json:"gas,omitempty" yaml:"gas"`
	// amount is the amount of coins to be paid as a fee
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *Fee) Reset()         { *m = Fee{} }
func (m *Fee) String() string { return proto.CompactTextString(m) }
func (*Fee) ProtoMessage()    {}
func (*Fee) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{13}
}
func (m *Fee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fee.Merge(m, src)
}
func (m *Fee) XXX_Size() int {
	return m.Size()
}
func (m *Fee) XXX_DiscardUnknown() {
	xxx_messageInfo_Fee.DiscardUnknown(m)
}

var xxx_messageInfo_Fee proto.InternalMessageInfo

func (m *Fee) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *Fee) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// PubKey struct of tendermint/cosmos-sdk
type PubKey struct {
	// type of pubkey algorithm
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" yaml:"type"`
	// value of pubkey
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" yaml:"value"`
}

func (m *PubKey) Reset()         { *m = PubKey{} }
func (m *PubKey) String() string { return proto.CompactTextString(m) }
func (*PubKey) ProtoMessage()    {}
func (*PubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{14}
}
func (m *PubKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKey.Merge(m, src)
}
func (m *PubKey) XXX_Size() int {
	return m.Size()
}
func (m *PubKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKey.DiscardUnknown(m)
}

var xxx_messageInfo_PubKey proto.InternalMessageInfo

func (m *PubKey) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PubKey) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// signature struct of tendermint/cosmos-sdk
type Signature struct {
	// signature base64
	Signature string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty" yaml:"signature"`
	// PubKey
	PubKey *PubKey `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty" yaml:"pub_key"`
	// The account number of the signing account (offline mode only)
	AccountNumber uint64 `protobuf:"varint,3,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty" yaml:"account_number"`
	// The sequence number of the signing account (offline mode only)
	Sequence uint64 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty" yaml:"sequence"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{15}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *Signature) GetPubKey() *PubKey {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Signature) GetAccountNumber() uint64 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

func (m *Signature) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// Base response struct of result of the requested Tx, standard of tendermint/cosmos-sdk
type StdTx struct {
	// Msgs
	Msg []string `protobuf:"bytes,1,rep,name=msg,proto3" json:"msg,omitempty" yaml:"msg"`
	// Fee
	Fee *Fee `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty" yaml:"fee"`
	// Memo of the transaction
	Memo string `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty" yaml:"memo"`
	// Signature
	Signature *Signature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty" yaml:"signature"`
}

func (m *StdTx) Reset()         { *m = StdTx{} }
func (m *StdTx) String() string { return proto.CompactTextString(m) }
func (*StdTx) ProtoMessage()    {}
func (*StdTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{16}
}
func (m *StdTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StdTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StdTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StdTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StdTx.Merge(m, src)
}
func (m *StdTx) XXX_Size() int {
	return m.Size()
}
func (m *StdTx) XXX_DiscardUnknown() {
	xxx_messageInfo_StdTx.DiscardUnknown(m)
}

var xxx_messageInfo_StdTx proto.InternalMessageInfo

func (m *StdTx) GetMsg() []string {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *StdTx) GetFee() *Fee {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *StdTx) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *StdTx) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgCreateLiquidityPool)(nil), "tendermint.liquidity.MsgCreateLiquidityPool")
	proto.RegisterType((*MsgCreateLiquidityPoolRequest)(nil), "tendermint.liquidity.MsgCreateLiquidityPoolRequest")
	proto.RegisterType((*MsgCreateLiquidityPoolResponse)(nil), "tendermint.liquidity.MsgCreateLiquidityPoolResponse")
	proto.RegisterType((*MsgDepositToLiquidityPool)(nil), "tendermint.liquidity.MsgDepositToLiquidityPool")
	proto.RegisterType((*MsgDepositToLiquidityPoolRequest)(nil), "tendermint.liquidity.MsgDepositToLiquidityPoolRequest")
	proto.RegisterType((*MsgDepositToLiquidityPoolResponse)(nil), "tendermint.liquidity.MsgDepositToLiquidityPoolResponse")
	proto.RegisterType((*MsgWithdrawFromLiquidityPool)(nil), "tendermint.liquidity.MsgWithdrawFromLiquidityPool")
	proto.RegisterType((*MsgWithdrawFromLiquidityPoolRequest)(nil), "tendermint.liquidity.MsgWithdrawFromLiquidityPoolRequest")
	proto.RegisterType((*MsgWithdrawFromLiquidityPoolResponse)(nil), "tendermint.liquidity.MsgWithdrawFromLiquidityPoolResponse")
	proto.RegisterType((*MsgSwap)(nil), "tendermint.liquidity.MsgSwap")
	proto.RegisterType((*MsgSwapRequest)(nil), "tendermint.liquidity.MsgSwapRequest")
	proto.RegisterType((*MsgSwapResponse)(nil), "tendermint.liquidity.MsgSwapResponse")
	proto.RegisterType((*BaseReq)(nil), "tendermint.liquidity.BaseReq")
	proto.RegisterType((*Fee)(nil), "tendermint.liquidity.Fee")
	proto.RegisterType((*PubKey)(nil), "tendermint.liquidity.PubKey")
	proto.RegisterType((*Signature)(nil), "tendermint.liquidity.Signature")
	proto.RegisterType((*StdTx)(nil), "tendermint.liquidity.StdTx")
}

func init() { proto.RegisterFile("tx.proto", fileDescriptor_0fd2153dc07d3b5c) }

var fileDescriptor_0fd2153dc07d3b5c = []byte{
	// 2193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x59, 0xcf, 0x6f, 0x1b, 0xc7,
	0x15, 0xd6, 0x8a, 0x94, 0x44, 0x8e, 0x2c, 0xc9, 0x5a, 0x2b, 0x2e, 0x25, 0xdb, 0x22, 0x3b, 0xb1,
	0x53, 0x39, 0xb6, 0x48, 0x91, 0xfa, 0x61, 0x59, 0x45, 0x1b, 0xec, 0x4a, 0x56, 0xac, 0xb5, 0x15,
	0xd8, 0x2b, 0x59, 0xb6, 0x63, 0x04, 0xc4, 0x92, 0x3b, 0x5c, 0xae, 0x45, 0xee, 0x90, 0x3b, 0xbb,
	0x92, 0x28, 0xc3, 0x28, 0xda, 0x53, 0x81, 0xf4, 0x90, 0x30, 0x6d, 0x51, 0x9f, 0x6a, 0x18, 0xbd,
	0xb4, 0x68, 0xef, 0x3d, 0xb5, 0x68, 0x51, 0x14, 0x39, 0xf4, 0x10, 0xa0, 0x97, 0xa0, 0x07, 0xb6,
	0xb0, 0x73, 0x08, 0x7a, 0xc8, 0x41, 0x7f, 0x41, 0x31, 0x33, 0x4b, 0x71, 0x29, 0x91, 0x92, 0xe5,
	0x08, 0xb0, 0x81, 0xea, 0xc2, 0x99, 0xd9, 0xf7, 0xde, 0x7c, 0x6f, 0x66, 0xbe, 0xf7, 0xde, 0x8c,
	0x40, 0xc8, 0xd9, 0x8a, 0x97, 0x6c, 0xec, 0x60, 0x71, 0xc8, 0x41, 0x96, 0x8e, 0xec, 0xa2, 0x69,
	0x39, 0xf1, 0x82, 0x59, 0x76, 0x4d, 0xdd, 0x74, 0x2a, 0x23, 0x43, 0x06, 0x36, 0x30, 0x13, 0x48,
	0xd0, 0x16, 0x97, 0x1d, 0x39, 0x6b, 0x60, 0x6c, 0x14, 0x50, 0x42, 0x2b, 0x99, 0x09, 0xcd, 0xb2,
	0xb0, 0xa3, 0x39, 0x26, 0xb6, 0x88, 0xf7, 0xf5, 0x3b, 0x59, 0x4c, 0x8a, 0x98, 0xa4, 0xb9, 0x5a,
	0x16, 0x9b, 0x96, 0xf7, 0x81, 0xff, 0x64, 0xc7, 0x0d, 0x64, 0x8d, 0xe3, 0x12, 0xb2, 0xb4, 0x92,
	0xb9, 0x91, 0x4a, 0xe0, 0x12, 0x53, 0xde, 0x6f, 0x08, 0x3e, 0xe9, 0x02, 0xa7, 0x97, 0x89, 0x31,
	0x6f, 0x23, 0xcd, 0x41, 0x37, 0xeb, 0x98, 0x6e, 0x61, 0x5c, 0x10, 0xff, 0x2e, 0x80, 0xa1, 0x12,
	0xc6, 0x85, 0x74, 0x96, 0x7e, 0xc4, 0x76, 0x5a, 0xd3, 0x75, 0x1b, 0x11, 0x12, 0x11, 0x62, 0xc2,
	0x58, 0x58, 0xfe, 0x4c, 0xa8, 0x4a, 0xe5, 0xd4, 0xb8, 0x96, 0xcd, 0x62, 0xd7, 0x72, 0x62, 0xde,
	0xc7, 0x18, 0xce, 0xc5, 0x9c, 0x3c, 0x8a, 0x61, 0xdb, 0x34, 0x4c, 0x8b, 0xf7, 0x4c, 0x12, 0x2b,
	0x22, 0x42, 0x34, 0x03, 0x29, 0x09, 0xc8, 0x81, 0x27, 0xd1, 0xe4, 0x74, 0x65, 0xe6, 0xaa, 0x9d,
	0xb7, 0x9d, 0x2b, 0x95, 0xa9, 0x4a, 0x16, 0x4d, 0x17, 0xa6, 0xdd, 0x2b, 0x93, 0xe4, 0xa1, 0xb5,
	0xe5, 0x4e, 0x14, 0x26, 0x27, 0x37, 0x37, 0xb6, 0xad, 0x8a, 0x6b, 0xc1, 0x67, 0x9d, 0xfd, 0x44,
	0x5f, 0x8f, 0x4b, 0xd9, 0xac, 0xc4, 0xed, 0xef, 0xd4, 0xa2, 0x67, 0x2a, 0x5a, 0xb1, 0x30, 0x07,
	0x5b, 0x41, 0x83, 0xaa, 0x48, 0x87, 0xe7, 0xf9, 0xa8, 0xa7, 0x22, 0xae, 0x80, 0x01, 0x26, 0xec,
	0x54, 0x4a, 0x28, 0x6d, 0x5a, 0x3a, 0xda, 0x8a, 0x74, 0xc6, 0x84, 0xb1, 0x3e, 0xf9, 0x52, 0x55,
	0xea, 0x57, 0x02, 0x30, 0x09, 0x9f, 0x75, 0x76, 0xbb, 0xa6, 0xe5, 0x4c, 0xa6, 0x76, 0x6a, 0xd1,
	0xd3, 0x3e, 0xf3, 0x0d, 0x0d, 0xa8, 0xf6, 0xd1, 0x91, 0xd5, 0x4a, 0x09, 0x2d, 0xd1, 0xbe, 0x98,
	0x03, 0xa7, 0x6c, 0x44, 0x90, 0xbd, 0x81, 0xd2, 0x74, 0xf9, 0xd3, 0x3a, 0xb2, 0x70, 0x91, 0x44,
	0x02, 0xb1, 0xc0, 0x58, 0x58, 0x9e, 0xa9, 0x4a, 0x6f, 0x29, 0xa7, 0x1e, 0x40, 0x36, 0x28, 0xc1,
	0xcb, 0xbc, 0x21, 0xc3, 0x8f, 0x76, 0x6a, 0xd1, 0x11, 0x6e, 0xbf, 0x85, 0x32, 0x54, 0x07, 0xbd,
	0xd1, 0x79, 0x6c, 0x5a, 0x0b, 0x6c, 0x4c, 0xfc, 0x46, 0x00, 0x7d, 0x3a, 0x2a, 0x61, 0x62, 0x3a,
	0x4c, 0x96, 0x44, 0x82, 0xb1, 0xc0, 0x58, 0x6f, 0x6a, 0x38, 0xce, 0x57, 0x32, 0x9e, 0xd1, 0x08,
	0x8a, 0x6f, 0x24, 0x33, 0xc8, 0xd1, 0x92, 0x71, 0xaa, 0x28, 0xff, 0x41, 0xa8, 0x4a, 0x19, 0x65,
	0xf5, 0xc1, 0x23, 0x3e, 0x2d, 0x9c, 0x8b, 0xed, 0x02, 0x89, 0x41, 0xad, 0x48, 0xb7, 0x8b, 0x8e,
	0x25, 0x27, 0xd8, 0x1f, 0x7c, 0x7c, 0x39, 0xb6, 0x57, 0x52, 0x6e, 0x96, 0x4c, 0xd5, 0x25, 0x3f,
	0x7a, 0xd6, 0x19, 0xa6, 0xfb, 0x41, 0xa7, 0x21, 0x9f, 0xd7, 0xa2, 0x1d, 0x3b, 0xb5, 0xe8, 0x10,
	0xf7, 0xa7, 0x09, 0x23, 0xfc, 0xdd, 0xbf, 0xa3, 0x63, 0x86, 0xe9, 0xe4, 0xdd, 0x4c, 0x3c, 0x8b,
	0x8b, 0x09, 0x0e, 0xd5, 0xfb, 0x19, 0x27, 0xfa, 0x7a, 0x82, 0xae, 0x2c, 0xe1, 0x76, 0xd4, 0x13,
	0x9e, 0x2e, 0xeb, 0xcd, 0x85, 0x7e, 0xfa, 0x34, 0xda, 0xf1, 0xf5, 0xd3, 0x68, 0x07, 0x7c, 0x22,
	0x80, 0x73, 0xad, 0xcf, 0xa6, 0x8a, 0xca, 0x2e, 0x22, 0x8e, 0x38, 0x0b, 0x42, 0xd4, 0xfd, 0xb4,
	0x8d, 0xca, 0xec, 0x54, 0xf6, 0xa6, 0xce, 0xc5, 0x5b, 0x71, 0x2c, 0x2e, 0x6b, 0x04, 0xa9, 0xa8,
	0xac, 0xf6, 0x64, 0x78, 0x43, 0xfc, 0x21, 0x08, 0x14, 0x89, 0xc1, 0xce, 0x41, 0x6f, 0xea, 0x72,
	0x6b, 0xa5, 0x36, 0x73, 0x53, 0x45, 0x68, 0x80, 0xd1, 0x76, 0xd0, 0x48, 0x09, 0x5b, 0x04, 0x89,
	0xd7, 0x40, 0x37, 0x71, 0xf4, 0xb4, 0xb3, 0xe5, 0x21, 0x3b, 0xd3, 0x7a, 0x92, 0x15, 0x47, 0x5f,
	0xdd, 0x92, 0x07, 0x77, 0x6a, 0xd1, 0x3e, 0xbe, 0x90, 0x5c, 0x09, 0xaa, 0x5d, 0x84, 0x7e, 0x81,
	0x4f, 0x83, 0x60, 0x78, 0x99, 0x18, 0x0b, 0x7c, 0x89, 0x56, 0x71, 0x33, 0x47, 0xff, 0x24, 0x80,
	0x41, 0x6f, 0xf5, 0xf6, 0x11, 0xf4, 0x93, 0xd7, 0x45, 0xd0, 0x48, 0xd3, 0x89, 0xf0, 0xb3, 0xf3,
	0xe4, 0xee, 0x58, 0x9d, 0x9b, 0xef, 0x83, 0x1e, 0xc6, 0x34, 0x53, 0x67, 0x7b, 0x11, 0x94, 0xe3,
	0x7b, 0x38, 0x39, 0x33, 0xf5, 0xdf, 0x5a, 0xb4, 0x2e, 0xb3, 0x53, 0x8b, 0xf6, 0xfb, 0xe8, 0x69,
	0xea, 0x50, 0xed, 0xa6, 0xad, 0x25, 0xbd, 0x05, 0x4f, 0x02, 0xff, 0x2f, 0x3c, 0xf9, 0x5a, 0x00,
	0xb1, 0xb6, 0x47, 0xe4, 0xdb, 0x53, 0xe5, 0xd8, 0xb6, 0x48, 0xe2, 0x9c, 0x0b, 0xb0, 0xd9, 0x13,
	0x6d, 0x39, 0xd7, 0xc6, 0x0f, 0x46, 0xbb, 0x87, 0xe0, 0xbb, 0x07, 0x78, 0x7a, 0xbc, 0xcc, 0xfb,
	0x2a, 0x00, 0xce, 0x2e, 0x13, 0xe3, 0xae, 0xe9, 0xe4, 0x75, 0x5b, 0xdb, 0x5c, 0xb4, 0x71, 0xb1,
	0x99, 0x7c, 0x7f, 0x11, 0x80, 0xb8, 0xe9, 0x7d, 0x45, 0x7b, 0xd9, 0xf7, 0xe9, 0xeb, 0x62, 0xdf,
	0x30, 0x77, 0x66, 0x3f, 0x30, 0xa8, 0x0e, 0x36, 0x06, 0x8f, 0x9d, 0x7f, 0xbf, 0x17, 0x40, 0x98,
	0xa7, 0x64, 0x6c, 0x5a, 0xde, 0x1e, 0x1f, 0xc0, 0x3d, 0xa7, 0x2a, 0xdd, 0x57, 0x6e, 0xfa, 0xf8,
	0xe4, 0x39, 0x5e, 0xde, 0x9e, 0x9c, 0xb5, 0x2a, 0xc5, 0x75, 0x82, 0x9c, 0xb2, 0x9e, 0xd2, 0xa7,
	0xca, 0x88, 0xd8, 0x5b, 0xa5, 0x5c, 0x6e, 0xbb, 0xb2, 0xe9, 0xa2, 0xc2, 0x6c, 0x4a, 0x9b, 0x2a,
	0x4c, 0x6c, 0x90, 0xfd, 0x04, 0x85, 0x8f, 0x9f, 0x75, 0x86, 0xea, 0x94, 0xf3, 0x18, 0x77, 0xd2,
	0x5f, 0x28, 0x60, 0xd3, 0x82, 0x6a, 0x88, 0x55, 0x07, 0xd8, 0xb4, 0x7c, 0xec, 0xf9, 0x46, 0x00,
	0x6f, 0x1f, 0xb4, 0xcd, 0x6f, 0x10, 0x81, 0x16, 0xfc, 0x04, 0x4a, 0xb5, 0x25, 0x50, 0x7b, 0x57,
	0x18, 0x87, 0x8a, 0xe0, 0xfc, 0xc1, 0xfe, 0x1e, 0x2f, 0x8d, 0x7e, 0xd3, 0x0d, 0x7a, 0x96, 0x89,
	0xb1, 0xb2, 0xa9, 0x95, 0xc4, 0x7f, 0x08, 0xe0, 0x34, 0xd9, 0xd4, 0x4a, 0x74, 0x11, 0xe9, 0xa2,
	0xee, 0x63, 0xcd, 0x2f, 0x5e, 0x17, 0x6b, 0xce, 0x79, 0xd8, 0x5b, 0x82, 0x83, 0xea, 0x10, 0xfd,
	0xa0, 0xd6, 0xc7, 0x8f, 0x9d, 0x3c, 0x2d, 0x2a, 0xd4, 0xc0, 0xb7, 0xae, 0x50, 0x65, 0x10, 0x66,
	0xee, 0x50, 0x91, 0x48, 0x90, 0x99, 0xbb, 0xd0, 0xca, 0xdc, 0x49, 0x9f, 0xeb, 0x54, 0x16, 0xaa,
	0x21, 0xda, 0xa6, 0x86, 0xc4, 0x8f, 0x05, 0x00, 0x70, 0x2e, 0x87, 0x6c, 0x4e, 0xeb, 0xae, 0xc3,
	0x68, 0x7d, 0xbb, 0x2a, 0x4d, 0x2b, 0x63, 0x2f, 0x9b, 0x50, 0xf7, 0x53, 0x76, 0x90, 0x63, 0x69,
	0x4c, 0x09, 0xd5, 0x30, 0xeb, 0x50, 0x19, 0xf1, 0x0e, 0x2d, 0x76, 0x8a, 0x9a, 0xa5, 0xfb, 0xaa,
	0xe6, 0x48, 0x37, 0x3b, 0x38, 0x17, 0xab, 0x12, 0x50, 0x42, 0xf5, 0xac, 0xec, 0x2f, 0x42, 0xf6,
	0xc8, 0x43, 0x75, 0x80, 0x8f, 0xed, 0xd6, 0xd8, 0x62, 0x05, 0xf4, 0x62, 0x5b, 0x47, 0x76, 0xba,
	0x64, 0x9b, 0x59, 0x14, 0xe9, 0x89, 0x09, 0x63, 0x27, 0xe4, 0x7b, 0x55, 0x69, 0x50, 0xe9, 0x82,
	0xc9, 0x38, 0x5d, 0xac, 0x1e, 0x0a, 0x73, 0x01, 0x65, 0x29, 0xca, 0x7f, 0xd5, 0xa2, 0xef, 0xbc,
	0x44, 0xca, 0x5e, 0x40, 0xd9, 0x9d, 0x5a, 0x54, 0xf4, 0xfc, 0x69, 0x98, 0x87, 0x2a, 0x60, 0xbd,
	0x5b, 0xb4, 0xe3, 0x0b, 0x43, 0x7f, 0x13, 0x40, 0xbf, 0x47, 0x93, 0x37, 0x28, 0xe2, 0x24, 0xfc,
	0x11, 0xe7, 0x5c, 0xdb, 0x88, 0xc3, 0x50, 0xb3, 0xe0, 0x72, 0x0f, 0x0c, 0xec, 0x7a, 0x71, 0xbc,
	0x71, 0xe4, 0xd3, 0x10, 0xe8, 0xf1, 0x1c, 0x15, 0xf3, 0x20, 0x98, 0xb3, 0x71, 0xd1, 0x0b, 0x1a,
	0xab, 0x55, 0x49, 0x6e, 0x04, 0x81, 0x97, 0xcc, 0x20, 0xad, 0x82, 0x40, 0x2f, 0x9f, 0x98, 0x9a,
	0x86, 0x2a, 0x9b, 0x41, 0x94, 0x40, 0xb0, 0x88, 0x8a, 0x98, 0x2d, 0x63, 0x58, 0x1e, 0xaf, 0x4a,
	0x67, 0x94, 0x61, 0xb8, 0x82, 0x2c, 0x27, 0xb6, 0x61, 0x6a, 0xb1, 0x79, 0x36, 0x65, 0x6c, 0x0d,
	0x57, 0x34, 0x03, 0xd9, 0xb0, 0x61, 0x82, 0xea, 0x40, 0x95, 0xa9, 0x8a, 0xef, 0x81, 0x50, 0x36,
	0xaf, 0x99, 0x16, 0xdd, 0x8d, 0x00, 0x33, 0x73, 0x9e, 0xee, 0xc6, 0x09, 0xc8, 0xb5, 0xc7, 0xaf,
	0xbb, 0x19, 0xaa, 0x39, 0xc0, 0x35, 0xeb, 0xa2, 0x50, 0xed, 0x61, 0xcd, 0x25, 0x5d, 0x5c, 0x05,
	0xfd, 0x5e, 0x40, 0x4c, 0x5b, 0x6e, 0x31, 0x83, 0x6c, 0xc6, 0xe6, 0x20, 0x45, 0x33, 0xa8, 0x74,
	0xc3, 0xe4, 0x54, 0xca, 0xb7, 0xaf, 0x3b, 0xb5, 0xe8, 0x5b, 0xdc, 0x52, 0xb3, 0x0e, 0x54, 0xfb,
	0xbc, 0x81, 0x0f, 0x58, 0x5f, 0x94, 0x40, 0x88, 0xd0, 0x83, 0x66, 0x65, 0x11, 0xe3, 0x75, 0x90,
	0x46, 0x87, 0x01, 0x25, 0x08, 0x93, 0x93, 0x4d, 0xd6, 0x3c, 0x5c, 0x75, 0x59, 0x1a, 0x1d, 0xbc,
	0xa6, 0xb8, 0x02, 0xfa, 0x1d, 0xb3, 0x88, 0xb0, 0xeb, 0xa4, 0xf3, 0xc8, 0x34, 0xf2, 0x0e, 0x23,
	0x63, 0x50, 0xbe, 0x5c, 0x95, 0x4e, 0x2a, 0x5d, 0xb4, 0x1c, 0x6e, 0x85, 0xab, 0x59, 0x05, 0xaa,
	0x7d, 0xde, 0xc0, 0x75, 0xd6, 0x17, 0x7f, 0x2e, 0x80, 0x60, 0x0e, 0x21, 0x12, 0xe9, 0x39, 0xac,
	0x7e, 0x47, 0x55, 0x29, 0xa5, 0x9c, 0xf7, 0x97, 0xef, 0xae, 0xe6, 0xe0, 0xe2, 0xde, 0x60, 0xd3,
	0xa2, 0x1c, 0x3f, 0x52, 0xd9, 0xcd, 0xd0, 0x88, 0x7f, 0x16, 0x00, 0x30, 0x34, 0xc2, 0x49, 0x4c,
	0x22, 0x21, 0x06, 0xee, 0x6c, 0x4b, 0x70, 0x0b, 0x28, 0xcb, 0xf0, 0xfd, 0x58, 0xa8, 0x4a, 0x33,
	0xca, 0x85, 0x43, 0x00, 0x4e, 0xc4, 0x93, 0x0c, 0xe1, 0x09, 0x2f, 0xc6, 0xf8, 0xef, 0x0c, 0x5e,
	0x38, 0x6c, 0xcc, 0x4b, 0x2f, 0x0c, 0x97, 0x5e, 0x2e, 0xfa, 0x70, 0xf0, 0x61, 0x43, 0x23, 0x2c,
	0xd4, 0x10, 0x71, 0x06, 0x04, 0x0c, 0x8d, 0x44, 0xc2, 0x6c, 0x8b, 0xce, 0x57, 0xa5, 0x53, 0x4a,
	0xc8, 0xbb, 0xb1, 0x34, 0xed, 0x12, 0xd8, 0x9d, 0x13, 0xaa, 0x54, 0x81, 0x1e, 0x3f, 0x0a, 0x40,
	0xd3, 0x1f, 0xba, 0xc4, 0x29, 0x22, 0xcb, 0x89, 0x80, 0x3a, 0x19, 0x78, 0x84, 0x4c, 0xf9, 0x22,
	0x64, 0x63, 0x9b, 0x9b, 0x75, 0xa0, 0xda, 0x67, 0x68, 0x44, 0xda, 0xed, 0x8b, 0x57, 0x41, 0x88,
	0x98, 0x45, 0xb7, 0xa0, 0x39, 0x28, 0xd2, 0x1b, 0x13, 0xc6, 0x42, 0xf2, 0xb9, 0xaa, 0xd4, 0xa3,
	0x74, 0xe5, 0xb4, 0x02, 0x41, 0xbe, 0x63, 0xe7, 0xc9, 0xd0, 0x63, 0xe7, 0x35, 0x7d, 0x41, 0xf3,
	0x4b, 0x01, 0x04, 0x16, 0x11, 0xaa, 0xbb, 0x26, 0x1c, 0xd5, 0xb5, 0x5f, 0x09, 0xa0, 0x9b, 0xef,
	0x44, 0xa4, 0xf3, 0x0d, 0x39, 0x6d, 0x1e, 0x1e, 0xf8, 0x5b, 0x01, 0x74, 0xdf, 0x72, 0x33, 0x37,
	0x50, 0x45, 0x5c, 0x00, 0x41, 0x96, 0xc3, 0x79, 0xb4, 0x9b, 0xa8, 0x4a, 0xa3, 0xca, 0x59, 0xd8,
	0x88, 0xa1, 0x09, 0x2e, 0xb6, 0x82, 0xb2, 0xa5, 0xd4, 0xf4, 0xcc, 0x7a, 0xd2, 0x17, 0x86, 0x78,
	0x3a, 0x67, 0xda, 0xe2, 0x7d, 0xd0, 0xb5, 0xa1, 0x15, 0x5c, 0xe4, 0x85, 0xb2, 0xf9, 0xaa, 0x34,
	0xa1, 0xc4, 0xa1, 0xb4, 0xb1, 0x3d, 0x31, 0xb5, 0x96, 0x77, 0x6e, 0x28, 0xf9, 0x59, 0x69, 0x7e,
	0x7e, 0x6d, 0xbb, 0xb0, 0x34, 0xab, 0xad, 0x62, 0xf2, 0x7e, 0x65, 0xc2, 0x5c, 0x5f, 0xbc, 0x77,
	0x63, 0x69, 0xed, 0xfa, 0xed, 0xc9, 0x87, 0x37, 0x96, 0x6d, 0x4c, 0xae, 0x53, 0xc3, 0x27, 0xb8,
	0x61, 0x66, 0x09, 0xaa, 0xdc, 0x22, 0xfc, 0x38, 0x00, 0xc2, 0x2b, 0xa6, 0x61, 0x69, 0x8e, 0x6b,
	0x23, 0xf1, 0x89, 0x00, 0xc2, 0xa4, 0xde, 0xf3, 0x40, 0x3f, 0xaa, 0x4a, 0xba, 0x92, 0x81, 0xcb,
	0xd7, 0xee, 0xcc, 0x2f, 0xdd, 0x5e, 0x98, 0x48, 0xe5, 0xc8, 0xc2, 0x2d, 0x5b, 0x9b, 0x5d, 0x76,
	0x32, 0x2a, 0xa9, 0xc8, 0xc9, 0xcd, 0x2b, 0x99, 0xf2, 0xea, 0xf2, 0xf4, 0xf4, 0x5d, 0x37, 0x39,
	0x39, 0xbb, 0x7d, 0x3b, 0xb3, 0x98, 0xbd, 0xbb, 0x35, 0x75, 0x69, 0x7e, 0xb1, 0x22, 0x2d, 0x19,
	0x68, 0xfa, 0xee, 0x07, 0xb7, 0x72, 0x37, 0x96, 0xdc, 0x8d, 0x6d, 0xf9, 0xc3, 0x99, 0xab, 0xcb,
	0x95, 0xf2, 0x75, 0x52, 0x5e, 0x98, 0x5d, 0x49, 0x2e, 0x6d, 0x9a, 0xd7, 0x4a, 0x97, 0xcc, 0x3b,
	0x99, 0x99, 0xb5, 0x15, 0xdd, 0x29, 0x94, 0x8c, 0xfb, 0x3f, 0x80, 0xbe, 0x72, 0xa6, 0x8e, 0x00,
	0xaa, 0x0d, 0x34, 0xe2, 0x12, 0xe8, 0x29, 0xb9, 0x99, 0xf4, 0x3a, 0xaa, 0x78, 0x4f, 0x3f, 0x67,
	0x5b, 0x27, 0x23, 0xbe, 0xa4, 0xb2, 0xe8, 0x4b, 0x8d, 0x5c, 0x8d, 0xa6, 0x46, 0xbe, 0x2b, 0xfb,
	0xa3, 0x72, 0xe0, 0x98, 0xa3, 0x72, 0xf0, 0x95, 0xa2, 0x32, 0xfc, 0x59, 0x27, 0xe8, 0x62, 0xc9,
	0x54, 0xbc, 0xc9, 0xb3, 0xb7, 0xc0, 0xde, 0x24, 0xe7, 0xaa, 0xd2, 0x45, 0xe5, 0x7b, 0x0f, 0x60,
	0xdb, 0xfb, 0x33, 0xbc, 0x0c, 0xbd, 0xd4, 0xcd, 0xde, 0x29, 0x3d, 0xb2, 0xd0, 0xa4, 0xce, 0x52,
	0xbb, 0xf8, 0x7d, 0x10, 0xc8, 0x21, 0xe4, 0xad, 0xdb, 0x70, 0xeb, 0x75, 0x5b, 0x44, 0x48, 0xee,
	0x6f, 0x28, 0xe7, 0x10, 0x82, 0x2a, 0xd5, 0x12, 0xdf, 0xf6, 0xf2, 0x28, 0x4f, 0x80, 0x03, 0xad,
	0x33, 0xe5, 0x8a, 0xff, 0xe0, 0x04, 0xd9, 0x3c, 0xd1, 0x36, 0xc5, 0x42, 0x5d, 0x4c, 0x1e, 0x3a,
	0x64, 0xcb, 0x53, 0xbf, 0xee, 0x02, 0x81, 0x65, 0x62, 0x88, 0xbf, 0x14, 0xc0, 0xa9, 0x56, 0xcf,
	0xdc, 0x47, 0x7a, 0xfc, 0x1b, 0x99, 0x3a, 0xd2, 0x53, 0xa1, 0x57, 0x02, 0xc1, 0x33, 0x3f, 0xf9,
	0xe7, 0x57, 0x9f, 0x75, 0xbe, 0x05, 0x4f, 0x26, 0x76, 0x55, 0x12, 0xb4, 0xc2, 0x22, 0x73, 0xc2,
	0xbb, 0xe2, 0x1f, 0x05, 0x70, 0xba, 0xcd, 0xf3, 0xde, 0x51, 0x1f, 0x49, 0x46, 0xae, 0x1c, 0xf5,
	0x55, 0xa5, 0x8e, 0x70, 0x8a, 0x21, 0x8c, 0xc3, 0x8b, 0x7b, 0x11, 0x26, 0x1e, 0x79, 0x45, 0xe1,
	0xe3, 0x44, 0x46, 0x73, 0xb2, 0xf9, 0x84, 0xf7, 0x08, 0xc5, 0xa0, 0xff, 0x55, 0x00, 0xc3, 0xed,
	0xdf, 0x47, 0x5e, 0xe1, 0x86, 0x3a, 0x32, 0xf7, 0x0a, 0xb7, 0xda, 0xba, 0x0f, 0xd3, 0xcc, 0x87,
	0x04, 0x7c, 0xf7, 0x50, 0x1f, 0xea, 0xef, 0x20, 0xcc, 0x89, 0x1f, 0x81, 0x20, 0xbb, 0x9c, 0x1e,
	0x5c, 0xde, 0x8e, 0x5c, 0x38, 0xb8, 0xfa, 0xad, 0x83, 0x48, 0x32, 0x10, 0x97, 0xe0, 0x3b, 0x87,
	0x82, 0xa0, 0x97, 0x2c, 0x0a, 0x40, 0x7e, 0xef, 0xf3, 0xe7, 0xa3, 0xc2, 0x17, 0xcf, 0x47, 0x85,
	0xff, 0x3c, 0x1f, 0x15, 0x3e, 0x79, 0x31, 0xda, 0xf1, 0xc5, 0x8b, 0xd1, 0x8e, 0x2f, 0x5f, 0x8c,
	0x76, 0x7c, 0x78, 0xc1, 0x97, 0x36, 0x7c, 0x01, 0xbf, 0x61, 0x99, 0x65, 0x8e, 0x4c, 0x37, 0xfb,
	0x5f, 0xce, 0xe4, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x25, 0xcd, 0x29, 0x6a, 0x1a, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Submit create liquidity pool message.
	CreateLiquidityPool(ctx context.Context, in *MsgCreateLiquidityPool, opts ...grpc.CallOption) (*MsgCreateLiquidityPoolResponse, error)
	// Submit deposit to the liquidity pool batch.
	DepositToLiquidityPool(ctx context.Context, in *MsgDepositToLiquidityPool, opts ...grpc.CallOption) (*MsgDepositToLiquidityPoolResponse, error)
	// Submit withdraw from to the liquidity pool batch.
	WithdrawFromLiquidityPool(ctx context.Context, in *MsgWithdrawFromLiquidityPool, opts ...grpc.CallOption) (*MsgWithdrawFromLiquidityPoolResponse, error)
	// Submit swap to the liquidity pool batch.
	Swap(ctx context.Context, in *MsgSwap, opts ...grpc.CallOption) (*MsgSwapResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateLiquidityPool(ctx context.Context, in *MsgCreateLiquidityPool, opts ...grpc.CallOption) (*MsgCreateLiquidityPoolResponse, error) {
	out := new(MsgCreateLiquidityPoolResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.Msg/CreateLiquidityPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositToLiquidityPool(ctx context.Context, in *MsgDepositToLiquidityPool, opts ...grpc.CallOption) (*MsgDepositToLiquidityPoolResponse, error) {
	out := new(MsgDepositToLiquidityPoolResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.Msg/DepositToLiquidityPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawFromLiquidityPool(ctx context.Context, in *MsgWithdrawFromLiquidityPool, opts ...grpc.CallOption) (*MsgWithdrawFromLiquidityPoolResponse, error) {
	out := new(MsgWithdrawFromLiquidityPoolResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.Msg/WithdrawFromLiquidityPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Swap(ctx context.Context, in *MsgSwap, opts ...grpc.CallOption) (*MsgSwapResponse, error) {
	out := new(MsgSwapResponse)
	err := c.cc.Invoke(ctx, "/tendermint.liquidity.Msg/Swap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Submit create liquidity pool message.
	CreateLiquidityPool(context.Context, *MsgCreateLiquidityPool) (*MsgCreateLiquidityPoolResponse, error)
	// Submit deposit to the liquidity pool batch.
	DepositToLiquidityPool(context.Context, *MsgDepositToLiquidityPool) (*MsgDepositToLiquidityPoolResponse, error)
	// Submit withdraw from to the liquidity pool batch.
	WithdrawFromLiquidityPool(context.Context, *MsgWithdrawFromLiquidityPool) (*MsgWithdrawFromLiquidityPoolResponse, error)
	// Submit swap to the liquidity pool batch.
	Swap(context.Context, *MsgSwap) (*MsgSwapResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateLiquidityPool(ctx context.Context, req *MsgCreateLiquidityPool) (*MsgCreateLiquidityPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLiquidityPool not implemented")
}
func (*UnimplementedMsgServer) DepositToLiquidityPool(ctx context.Context, req *MsgDepositToLiquidityPool) (*MsgDepositToLiquidityPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositToLiquidityPool not implemented")
}
func (*UnimplementedMsgServer) WithdrawFromLiquidityPool(ctx context.Context, req *MsgWithdrawFromLiquidityPool) (*MsgWithdrawFromLiquidityPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawFromLiquidityPool not implemented")
}
func (*UnimplementedMsgServer) Swap(ctx context.Context, req *MsgSwap) (*MsgSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Swap not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateLiquidityPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateLiquidityPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateLiquidityPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.Msg/CreateLiquidityPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateLiquidityPool(ctx, req.(*MsgCreateLiquidityPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositToLiquidityPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositToLiquidityPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositToLiquidityPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.Msg/DepositToLiquidityPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositToLiquidityPool(ctx, req.(*MsgDepositToLiquidityPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawFromLiquidityPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawFromLiquidityPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawFromLiquidityPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.Msg/WithdrawFromLiquidityPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawFromLiquidityPool(ctx, req.(*MsgWithdrawFromLiquidityPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Swap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSwap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Swap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.liquidity.Msg/Swap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Swap(ctx, req.(*MsgSwap))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tendermint.liquidity.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLiquidityPool",
			Handler:    _Msg_CreateLiquidityPool_Handler,
		},
		{
			MethodName: "DepositToLiquidityPool",
			Handler:    _Msg_DepositToLiquidityPool_Handler,
		},
		{
			MethodName: "WithdrawFromLiquidityPool",
			Handler:    _Msg_WithdrawFromLiquidityPool_Handler,
		},
		{
			MethodName: "Swap",
			Handler:    _Msg_Swap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tx.proto",
}

func (m *MsgCreateLiquidityPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLiquidityPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLiquidityPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositCoins) > 0 {
		for iNdEx := len(m.DepositCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ReserveCoinDenoms) > 0 {
		for iNdEx := len(m.ReserveCoinDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReserveCoinDenoms[iNdEx])
			copy(dAtA[i:], m.ReserveCoinDenoms[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ReserveCoinDenoms[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PoolTypeIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolTypeIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PoolCreatorAddress) > 0 {
		i -= len(m.PoolCreatorAddress)
		copy(dAtA[i:], m.PoolCreatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolCreatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateLiquidityPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLiquidityPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLiquidityPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseReq != nil {
		{
			size, err := m.BaseReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateLiquidityPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLiquidityPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLiquidityPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StdTx != nil {
		{
			size, err := m.StdTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositToLiquidityPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositToLiquidityPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositToLiquidityPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositCoins) > 0 {
		for iNdEx := len(m.DepositCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DepositorAddress) > 0 {
		i -= len(m.DepositorAddress)
		copy(dAtA[i:], m.DepositorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DepositorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositToLiquidityPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositToLiquidityPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositToLiquidityPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.BaseReq != nil {
		{
			size, err := m.BaseReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositToLiquidityPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositToLiquidityPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositToLiquidityPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StdTx != nil {
		{
			size, err := m.StdTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawFromLiquidityPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawFromLiquidityPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawFromLiquidityPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PoolCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.WithdrawerAddress) > 0 {
		i -= len(m.WithdrawerAddress)
		copy(dAtA[i:], m.WithdrawerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WithdrawerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawFromLiquidityPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawFromLiquidityPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawFromLiquidityPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.BaseReq != nil {
		{
			size, err := m.BaseReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawFromLiquidityPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawFromLiquidityPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawFromLiquidityPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StdTx != nil {
		{
			size, err := m.StdTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.OrderPrice.Size()
		i -= size
		if _, err := m.OrderPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.DemandCoinDenom) > 0 {
		i -= len(m.DemandCoinDenom)
		copy(dAtA[i:], m.DemandCoinDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DemandCoinDenom)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.OfferCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.SwapType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SwapType))
		i--
		dAtA[i] = 0x20
	}
	if m.PoolTypeIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolTypeIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SwapRequesterAddress) > 0 {
		i -= len(m.SwapRequesterAddress)
		copy(dAtA[i:], m.SwapRequesterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SwapRequesterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.BaseReq != nil {
		{
			size, err := m.BaseReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StdTx != nil {
		{
			size, err := m.StdTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Simulate {
		i--
		if m.Simulate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.GasAdjustment) > 0 {
		i -= len(m.GasAdjustment)
		copy(dAtA[i:], m.GasAdjustment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GasAdjustment)))
		i--
		dAtA[i] = 0x52
	}
	if m.Gas != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Gas))
		i--
		dAtA[i] = 0x48
	}
	if len(m.GasPrices) > 0 {
		for iNdEx := len(m.GasPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.TimeoutHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.Sequence != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x28
	}
	if m.AccountNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AccountNumber))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Fee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Gas != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Gas))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PubKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x20
	}
	if m.AccountNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AccountNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StdTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StdTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StdTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Msg) > 0 {
		for iNdEx := len(m.Msg) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Msg[iNdEx])
			copy(dAtA[i:], m.Msg[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Msg[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateLiquidityPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolCreatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolTypeIndex != 0 {
		n += 1 + sovTx(uint64(m.PoolTypeIndex))
	}
	if len(m.ReserveCoinDenoms) > 0 {
		for _, s := range m.ReserveCoinDenoms {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.DepositCoins) > 0 {
		for _, e := range m.DepositCoins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateLiquidityPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseReq != nil {
		l = m.BaseReq.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateLiquidityPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StdTx != nil {
		l = m.StdTx.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDepositToLiquidityPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if len(m.DepositCoins) > 0 {
		for _, e := range m.DepositCoins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgDepositToLiquidityPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseReq != nil {
		l = m.BaseReq.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDepositToLiquidityPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StdTx != nil {
		l = m.StdTx.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawFromLiquidityPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithdrawerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	l = m.PoolCoin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgWithdrawFromLiquidityPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseReq != nil {
		l = m.BaseReq.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawFromLiquidityPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StdTx != nil {
		l = m.StdTx.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SwapRequesterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.PoolTypeIndex != 0 {
		n += 1 + sovTx(uint64(m.PoolTypeIndex))
	}
	if m.SwapType != 0 {
		n += 1 + sovTx(uint64(m.SwapType))
	}
	l = m.OfferCoin.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.DemandCoinDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.OrderPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSwapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseReq != nil {
		l = m.BaseReq.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StdTx != nil {
		l = m.StdTx.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *BaseReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AccountNumber != 0 {
		n += 1 + sovTx(uint64(m.AccountNumber))
	}
	if m.Sequence != 0 {
		n += 1 + sovTx(uint64(m.Sequence))
	}
	if m.TimeoutHeight != 0 {
		n += 1 + sovTx(uint64(m.TimeoutHeight))
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.GasPrices) > 0 {
		for _, e := range m.GasPrices {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Gas != 0 {
		n += 1 + sovTx(uint64(m.Gas))
	}
	l = len(m.GasAdjustment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Simulate {
		n += 2
	}
	return n
}

func (m *Fee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gas != 0 {
		n += 1 + sovTx(uint64(m.Gas))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *PubKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AccountNumber != 0 {
		n += 1 + sovTx(uint64(m.AccountNumber))
	}
	if m.Sequence != 0 {
		n += 1 + sovTx(uint64(m.Sequence))
	}
	return n
}

func (m *StdTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Msg) > 0 {
		for _, s := range m.Msg {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateLiquidityPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLiquidityPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLiquidityPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCreatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCreatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolTypeIndex", wireType)
			}
			m.PoolTypeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolTypeIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveCoinDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveCoinDenoms = append(m.ReserveCoinDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositCoins = append(m.DepositCoins, types.Coin{})
			if err := m.DepositCoins[len(m.DepositCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateLiquidityPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLiquidityPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLiquidityPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseReq == nil {
				m.BaseReq = &BaseReq{}
			}
			if err := m.BaseReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgCreateLiquidityPool{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateLiquidityPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLiquidityPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLiquidityPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StdTx == nil {
				m.StdTx = &StdTx{}
			}
			if err := m.StdTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositToLiquidityPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositToLiquidityPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositToLiquidityPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositCoins = append(m.DepositCoins, types.Coin{})
			if err := m.DepositCoins[len(m.DepositCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositToLiquidityPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositToLiquidityPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositToLiquidityPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseReq == nil {
				m.BaseReq = &BaseReq{}
			}
			if err := m.BaseReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgDepositToLiquidityPool{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositToLiquidityPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositToLiquidityPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositToLiquidityPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StdTx == nil {
				m.StdTx = &StdTx{}
			}
			if err := m.StdTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawFromLiquidityPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawFromLiquidityPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawFromLiquidityPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawFromLiquidityPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawFromLiquidityPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawFromLiquidityPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseReq == nil {
				m.BaseReq = &BaseReq{}
			}
			if err := m.BaseReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgWithdrawFromLiquidityPool{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawFromLiquidityPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawFromLiquidityPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawFromLiquidityPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StdTx == nil {
				m.StdTx = &StdTx{}
			}
			if err := m.StdTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapRequesterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapRequesterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolTypeIndex", wireType)
			}
			m.PoolTypeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolTypeIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapType", wireType)
			}
			m.SwapType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OfferCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DemandCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DemandCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderPrice", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrderPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseReq == nil {
				m.BaseReq = &BaseReq{}
			}
			if err := m.BaseReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgSwap{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StdTx == nil {
				m.StdTx = &StdTx{}
			}
			if err := m.StdTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumber", wireType)
			}
			m.AccountNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			m.TimeoutHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, types.Coin{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPrices = append(m.GasPrices, types.DecCoin{})
			if err := m.GasPrices[len(m.GasPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gas", wireType)
			}
			m.Gas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasAdjustment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasAdjustment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Simulate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Simulate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gas", wireType)
			}
			m.Gas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &PubKey{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumber", wireType)
			}
			m.AccountNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StdTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StdTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StdTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &Fee{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &Signature{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
