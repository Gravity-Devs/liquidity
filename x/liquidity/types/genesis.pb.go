// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: genesis.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LiquidityPoolRecord struct {
	LiquidityPool         LiquidityPool         `protobuf:"bytes,1,opt,name=liquidity_pool,json=liquidityPool,proto3" json:"liquidity_pool" yaml:"liquidity_pool"`
	LiquidityPoolMetaData LiquidityPoolMetaData `protobuf:"bytes,2,opt,name=liquidity_pool_meta_data,json=liquidityPoolMetaData,proto3" json:"liquidity_pool_meta_data" yaml:"liquidity_pool_meta_data"`
	LiquidityPoolBatch    LiquidityPoolBatch    `protobuf:"bytes,3,opt,name=liquidity_pool_batch,json=liquidityPoolBatch,proto3" json:"liquidity_pool_batch" yaml:"liquidity_pool_batch"`
	// TODO: msg in BatchPool*Msg pointer issue, try and delete when unnecessary
	BatchPoolSwapMsgRecords []BatchPoolSwapMsgRecord `protobuf:"bytes,4,rep,name=batch_pool_swap_msg_records,json=batchPoolSwapMsgRecords,proto3" json:"batch_pool_swap_msg_records" yaml:"batch_pool_swap_msg_records"`
	BatchPoolDepositMsgs    []BatchPoolDepositMsg    `protobuf:"bytes,5,rep,name=batch_pool_deposit_msgs,json=batchPoolDepositMsgs,proto3" json:"batch_pool_deposit_msgs" yaml:"batch_pool_deposit_msgs"`
	BatchPoolWithdrawMsgs   []BatchPoolWithdrawMsg   `protobuf:"bytes,6,rep,name=batch_pool_withdraw_msgs,json=batchPoolWithdrawMsgs,proto3" json:"batch_pool_withdraw_msgs" yaml:"batch_pool_withdraw_msgs"`
	BatchPoolSwapMsgs       []BatchPoolSwapMsg       `protobuf:"bytes,7,rep,name=batch_pool_swap_msgs,json=batchPoolSwapMsgs,proto3" json:"batch_pool_swap_msgs" yaml:"batch_pool_swap_msgs"`
}

func (m *LiquidityPoolRecord) Reset()         { *m = LiquidityPoolRecord{} }
func (m *LiquidityPoolRecord) String() string { return proto.CompactTextString(m) }
func (*LiquidityPoolRecord) ProtoMessage()    {}
func (*LiquidityPoolRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_14205810582f3203, []int{0}
}
func (m *LiquidityPoolRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPoolRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPoolRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPoolRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPoolRecord.Merge(m, src)
}
func (m *LiquidityPoolRecord) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPoolRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPoolRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPoolRecord proto.InternalMessageInfo

func (m *LiquidityPoolRecord) GetLiquidityPool() LiquidityPool {
	if m != nil {
		return m.LiquidityPool
	}
	return LiquidityPool{}
}

func (m *LiquidityPoolRecord) GetLiquidityPoolMetaData() LiquidityPoolMetaData {
	if m != nil {
		return m.LiquidityPoolMetaData
	}
	return LiquidityPoolMetaData{}
}

func (m *LiquidityPoolRecord) GetLiquidityPoolBatch() LiquidityPoolBatch {
	if m != nil {
		return m.LiquidityPoolBatch
	}
	return LiquidityPoolBatch{}
}

func (m *LiquidityPoolRecord) GetBatchPoolSwapMsgRecords() []BatchPoolSwapMsgRecord {
	if m != nil {
		return m.BatchPoolSwapMsgRecords
	}
	return nil
}

func (m *LiquidityPoolRecord) GetBatchPoolDepositMsgs() []BatchPoolDepositMsg {
	if m != nil {
		return m.BatchPoolDepositMsgs
	}
	return nil
}

func (m *LiquidityPoolRecord) GetBatchPoolWithdrawMsgs() []BatchPoolWithdrawMsg {
	if m != nil {
		return m.BatchPoolWithdrawMsgs
	}
	return nil
}

func (m *LiquidityPoolRecord) GetBatchPoolSwapMsgs() []BatchPoolSwapMsg {
	if m != nil {
		return m.BatchPoolSwapMsgs
	}
	return nil
}

// GenesisState defines the liquidity module's genesis state.
type GenesisState struct {
	// params defines all the parameters of related to liquidity.
	Params               Params                `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	LiquidityPoolRecords []LiquidityPoolRecord `protobuf:"bytes,2,rep,name=liquidity_pool_records,json=liquidityPoolRecords,proto3" json:"liquidity_pool_records" yaml:"liquidity_pools"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_14205810582f3203, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

//
//// GenesisState defines the liquidity module's genesis state.
//message GenesisState {
//    option (gogoproto.equal)           = false;
//    option (gogoproto.goproto_getters) = false;
//
//    // params defines all the parameters of related to liquidity.
//    Params params = 1 [(gogoproto.nullable) = false];
//
//    repeated LiquidityPool liquidity_pools = 2   [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"liquidity_pools\""];
//
//    repeated LiquidityPoolMetaData liquidity_pools_meta_data = 3   [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"liquidity_pools_meta_data\""];
//
//    repeated LiquidityPoolBatch liquidity_pool_batches = 4   [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"liquidity_pool_batches\""];
//
//    repeated BatchPoolDepositMsg batch_pool_deposit_msgs = 5   [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"batch_pool_deposit_msgs\""];
//
//    repeated BatchPoolWithdrawMsg batch_pool_withdraw_msgs = 6   [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"batch_pool_withdraw_msgs\""];
//
//    repeated BatchPoolSwapMsg batch_pool_swap_msgs = 7   [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"batch_pool_swap_msgs\""];
//
//    repeated BatchPoolSwapMsgRecord batch_pool_swap_msg_records = 8   [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"batch_pool_swap_msg_records\""];
//
//    repeated QueryLiquidityPoolResponse liquidity_pool_records = 9   [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"liquidity_pool_records\""];
//
//    // TODO: invariant check balance of escrow module acc, reserveAcc
//
//}
//
//message BatchPoolDepositMsgRecord {
//    int64 msg_height = 1 [(gogoproto.moretags) = "yaml:\"msg_height\""];
//    uint64 msg_index = 2 [(gogoproto.moretags) = "yaml:\"msg_index\""];
//    bool executed = 3 [(gogoproto.moretags) = "yaml:\"executed\""];
//    bool succeed = 4 [(gogoproto.moretags) = "yaml:\"succeed\""];
//    bool to_delete = 5 [(gogoproto.moretags) = "yaml:\"to_delete\""];
//    MsgDepositToLiquidityPool Msg = 6 [(gogoproto.moretags) = "yaml:\"msg\"", (gogoproto.nullable) = false];
//}
//
//message BatchPoolWithdrawMsgRecord {
//    int64 msg_height = 1 [(gogoproto.moretags) = "yaml:\"msg_height\""];
//    uint64 msg_index = 2 [(gogoproto.moretags) = "yaml:\"msg_index\""];
//    bool executed = 3 [(gogoproto.moretags) = "yaml:\"executed\""];
//    bool succeed = 4 [(gogoproto.moretags) = "yaml:\"succeed\""];
//    bool to_delete = 5 [(gogoproto.moretags) = "yaml:\"to_delete\""];
//    MsgWithdrawFromLiquidityPool msg = 6 [(gogoproto.moretags) = "yaml:\"msg\"", (gogoproto.nullable) = false];
//}
//
type BatchPoolSwapMsgRecord struct {
	MsgHeight          int64      `protobuf:"varint,1,opt,name=msg_height,json=msgHeight,proto3" json:"msg_height,omitempty" yaml:"msg_height"`
	MsgIndex           uint64     `protobuf:"varint,2,opt,name=msg_index,json=msgIndex,proto3" json:"msg_index,omitempty" yaml:"msg_index"`
	Executed           bool       `protobuf:"varint,3,opt,name=executed,proto3" json:"executed,omitempty" yaml:"executed"`
	Succeed            bool       `protobuf:"varint,4,opt,name=succeed,proto3" json:"succeed,omitempty" yaml:"succeed"`
	ToDelete           bool       `protobuf:"varint,5,opt,name=to_delete,json=toDelete,proto3" json:"to_delete,omitempty" yaml:"to_delete"`
	OrderExpiryHeight  int64      `protobuf:"varint,6,opt,name=order_expiry_height,json=orderExpiryHeight,proto3" json:"order_expiry_height,omitempty" yaml:"order_expiry_height"`
	ExchangedOfferCoin types.Coin `protobuf:"bytes,7,opt,name=exchanged_offer_coin,json=exchangedOfferCoin,proto3" json:"exchanged_offer_coin" yaml:"exchanged_offer_coin"`
	RemainingOfferCoin types.Coin `protobuf:"bytes,8,opt,name=remaining_offer_coin,json=remainingOfferCoin,proto3" json:"remaining_offer_coin" yaml:"remaining_offer_coin"`
	Msg                MsgSwap    `protobuf:"bytes,9,opt,name=msg,proto3" json:"msg" yaml:"msg"`
}

func (m *BatchPoolSwapMsgRecord) Reset()         { *m = BatchPoolSwapMsgRecord{} }
func (m *BatchPoolSwapMsgRecord) String() string { return proto.CompactTextString(m) }
func (*BatchPoolSwapMsgRecord) ProtoMessage()    {}
func (*BatchPoolSwapMsgRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_14205810582f3203, []int{2}
}
func (m *BatchPoolSwapMsgRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchPoolSwapMsgRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchPoolSwapMsgRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchPoolSwapMsgRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchPoolSwapMsgRecord.Merge(m, src)
}
func (m *BatchPoolSwapMsgRecord) XXX_Size() int {
	return m.Size()
}
func (m *BatchPoolSwapMsgRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchPoolSwapMsgRecord.DiscardUnknown(m)
}

var xxx_messageInfo_BatchPoolSwapMsgRecord proto.InternalMessageInfo

func (m *BatchPoolSwapMsgRecord) GetMsgHeight() int64 {
	if m != nil {
		return m.MsgHeight
	}
	return 0
}

func (m *BatchPoolSwapMsgRecord) GetMsgIndex() uint64 {
	if m != nil {
		return m.MsgIndex
	}
	return 0
}

func (m *BatchPoolSwapMsgRecord) GetExecuted() bool {
	if m != nil {
		return m.Executed
	}
	return false
}

func (m *BatchPoolSwapMsgRecord) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *BatchPoolSwapMsgRecord) GetToDelete() bool {
	if m != nil {
		return m.ToDelete
	}
	return false
}

func (m *BatchPoolSwapMsgRecord) GetOrderExpiryHeight() int64 {
	if m != nil {
		return m.OrderExpiryHeight
	}
	return 0
}

func (m *BatchPoolSwapMsgRecord) GetExchangedOfferCoin() types.Coin {
	if m != nil {
		return m.ExchangedOfferCoin
	}
	return types.Coin{}
}

func (m *BatchPoolSwapMsgRecord) GetRemainingOfferCoin() types.Coin {
	if m != nil {
		return m.RemainingOfferCoin
	}
	return types.Coin{}
}

func (m *BatchPoolSwapMsgRecord) GetMsg() MsgSwap {
	if m != nil {
		return m.Msg
	}
	return MsgSwap{}
}

func init() {
	proto.RegisterType((*LiquidityPoolRecord)(nil), "tendermint.liquidity.LiquidityPoolRecord")
	proto.RegisterType((*GenesisState)(nil), "tendermint.liquidity.GenesisState")
	proto.RegisterType((*BatchPoolSwapMsgRecord)(nil), "tendermint.liquidity.BatchPoolSwapMsgRecord")
}

func init() { proto.RegisterFile("genesis.proto", fileDescriptor_14205810582f3203) }

var fileDescriptor_14205810582f3203 = []byte{
	// 827 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0x8f, 0xbb, 0xff, 0xd2, 0x29, 0x6d, 0xd9, 0xd9, 0x64, 0xd7, 0x6c, 0xa9, 0x5d, 0x4d, 0x45,
	0x59, 0x4a, 0xe5, 0x68, 0x0b, 0xa7, 0xbd, 0x20, 0xb9, 0x8b, 0x00, 0x89, 0x40, 0x35, 0x3d, 0x20,
	0x71, 0xb1, 0xc6, 0xf6, 0xd4, 0x19, 0xc9, 0xf6, 0x18, 0xcf, 0x84, 0x24, 0x12, 0x52, 0xaf, 0x3d,
	0x14, 0x89, 0x13, 0xe7, 0x7e, 0x16, 0x4e, 0x3d, 0xf6, 0x82, 0xc4, 0x29, 0x42, 0xbb, 0x17, 0xce,
	0xf9, 0x04, 0x68, 0xc6, 0x8e, 0x93, 0x4d, 0x86, 0xee, 0x72, 0x7b, 0x99, 0xf7, 0xfb, 0x97, 0x99,
	0xe7, 0x19, 0x70, 0x33, 0xa1, 0x39, 0x15, 0x4c, 0x78, 0x45, 0xc9, 0x25, 0x87, 0x1d, 0x49, 0xf3,
	0x98, 0x96, 0x19, 0xcb, 0xa5, 0x97, 0xb2, 0x9f, 0x86, 0x2c, 0x66, 0x72, 0x72, 0x78, 0xbb, 0x29,
	0x2b, 0xd8, 0x61, 0x5b, 0x8e, 0xeb, 0xaa, 0x93, 0xf0, 0x84, 0xeb, 0xb2, 0xa7, 0xaa, 0x7a, 0xf5,
	0x20, 0xe2, 0x22, 0xe3, 0x22, 0xa8, 0x1a, 0x11, 0x67, 0x79, 0xd5, 0x40, 0x7f, 0xec, 0x80, 0xbd,
	0x6f, 0xe7, 0x62, 0x4f, 0x39, 0x4f, 0x31, 0x8d, 0x78, 0x19, 0x43, 0x06, 0x6e, 0x35, 0x1e, 0x41,
	0xc1, 0x79, 0x6a, 0x5b, 0xf7, 0xac, 0xa3, 0x1b, 0x8f, 0xef, 0x7b, 0xa6, 0x40, 0xde, 0x05, 0x09,
	0xff, 0xee, 0x9b, 0xa9, 0xdb, 0x9a, 0x4d, 0xdd, 0xee, 0x84, 0x64, 0xe9, 0x09, 0xba, 0x28, 0x84,
	0xf0, 0xcd, 0x74, 0x19, 0x0d, 0x7f, 0xb5, 0x80, 0x7d, 0x11, 0x12, 0x64, 0x54, 0x92, 0x20, 0x26,
	0x92, 0xd8, 0xd7, 0xb4, 0xeb, 0xa7, 0x57, 0x70, 0xed, 0x53, 0x49, 0x4e, 0x89, 0x24, 0xfe, 0xc7,
	0xb5, 0xbb, 0x6b, 0x72, 0x5f, 0x48, 0x23, 0xdc, 0x4d, 0x4d, 0x7c, 0xf8, 0x02, 0x74, 0x56, 0x38,
	0x21, 0x91, 0xd1, 0xc0, 0xde, 0xd0, 0x51, 0x8e, 0xae, 0xb2, 0x01, 0x0a, 0xef, 0xdf, 0xaf, 0x73,
	0xdc, 0x31, 0xe6, 0xd0, 0x9a, 0x08, 0xc3, 0x74, 0x8d, 0x08, 0x7f, 0xb7, 0xc0, 0x1d, 0xdd, 0xae,
	0x90, 0x62, 0x44, 0x8a, 0x20, 0x13, 0x49, 0x50, 0xea, 0xa3, 0x11, 0xf6, 0xe6, 0xbd, 0x8d, 0xa3,
	0x1b, 0x8f, 0x1f, 0x99, 0x83, 0x68, 0x09, 0xa5, 0xf5, 0x6c, 0x44, 0x8a, 0xbe, 0x48, 0xaa, 0xf3,
	0xf4, 0x1f, 0xd6, 0x61, 0x50, 0x15, 0xe6, 0x1d, 0xf2, 0x08, 0x1f, 0x84, 0x46, 0x0d, 0x01, 0x5f,
	0x5a, 0xe0, 0x60, 0x89, 0x19, 0xd3, 0x82, 0x0b, 0x26, 0x15, 0x59, 0xd8, 0x5b, 0x3a, 0xd4, 0x27,
	0x97, 0x84, 0x3a, 0xad, 0x28, 0x7d, 0x91, 0xf8, 0x0f, 0xea, 0x44, 0xce, 0x5a, 0xa2, 0x65, 0x5d,
	0x84, 0x3b, 0xe1, 0x3a, 0x59, 0xc0, 0x57, 0x16, 0xb0, 0x97, 0x28, 0x23, 0x26, 0x07, 0x71, 0x49,
	0x46, 0x55, 0x96, 0x6d, 0x9d, 0xe5, 0xe1, 0x25, 0x59, 0x7e, 0xa8, 0x39, 0x2a, 0xcc, 0xca, 0xcc,
	0xfc, 0x97, 0x32, 0xc2, 0xdd, 0xd0, 0x40, 0x17, 0xf0, 0x17, 0xd0, 0x31, 0x6c, 0xa9, 0xb0, 0x77,
	0x74, 0x92, 0x07, 0x57, 0x3b, 0xaa, 0xd5, 0x89, 0x31, 0x29, 0x22, 0xbc, 0xbb, 0x7a, 0x3a, 0x02,
	0xfd, 0x69, 0x81, 0xf7, 0xbe, 0xaa, 0xae, 0x8d, 0x67, 0x92, 0x48, 0x0a, 0x4f, 0xc0, 0x76, 0x41,
	0x4a, 0x92, 0x89, 0xfa, 0xab, 0xfd, 0xd0, 0x1c, 0xe0, 0xa9, 0xc6, 0xf8, 0x9b, 0xca, 0x16, 0xd7,
	0x0c, 0xf8, 0x02, 0xec, 0xaf, 0x8c, 0xea, 0x7c, 0xee, 0xae, 0xbd, 0xeb, 0x88, 0x0d, 0x97, 0x88,
	0xef, 0xd4, 0xff, 0x67, 0xdf, 0xf4, 0x05, 0xa8, 0xa3, 0x4d, 0xd7, 0x49, 0xe2, 0xa4, 0xfd, 0xf2,
	0xb5, 0xdb, 0xfa, 0xe7, 0xb5, 0xdb, 0x42, 0xaf, 0xb6, 0xc0, 0xbe, 0x79, 0x9e, 0xe1, 0xe7, 0x00,
	0xa8, 0x99, 0x1d, 0x50, 0x96, 0x0c, 0xa4, 0xfe, 0x97, 0x1b, 0x7e, 0x77, 0x36, 0x75, 0x77, 0x2b,
	0xab, 0x45, 0x0f, 0xe1, 0xeb, 0x99, 0x48, 0xbe, 0xd6, 0x35, 0x3c, 0x06, 0xea, 0x47, 0xc0, 0xf2,
	0x98, 0x8e, 0xf5, 0xd5, 0xb2, 0xe9, 0x77, 0x66, 0x53, 0xf7, 0xfd, 0x05, 0x49, 0xb7, 0x10, 0x6e,
	0x67, 0x22, 0xf9, 0x46, 0x95, 0xb0, 0x07, 0xda, 0x74, 0x4c, 0xa3, 0xa1, 0xa4, 0xb1, 0xbe, 0x01,
	0xda, 0xfe, 0xde, 0x6c, 0xea, 0xde, 0xae, 0x18, 0xf3, 0x0e, 0xc2, 0x0d, 0x08, 0x3e, 0x02, 0x3b,
	0x62, 0x18, 0x45, 0x94, 0xc6, 0xf6, 0xa6, 0xc6, 0xc3, 0xd9, 0xd4, 0xbd, 0x55, 0xe1, 0xeb, 0x06,
	0xc2, 0x73, 0x88, 0x4a, 0x24, 0x79, 0x10, 0xd3, 0x94, 0x4a, 0x6a, 0x6f, 0x69, 0xfc, 0x52, 0xa2,
	0xa6, 0x85, 0x70, 0x5b, 0xf2, 0x53, 0x5d, 0xc2, 0xef, 0xc0, 0x1e, 0x2f, 0x63, 0x5a, 0x06, 0x74,
	0x5c, 0xb0, 0x72, 0x32, 0xdf, 0x83, 0x6d, 0xbd, 0x07, 0xce, 0x6c, 0xea, 0x1e, 0x56, 0x64, 0x03,
	0x08, 0xe1, 0x5d, 0xbd, 0xfa, 0xa5, 0x5e, 0xac, 0x37, 0xa5, 0x00, 0x1d, 0x3a, 0x8e, 0x06, 0x24,
	0x4f, 0x68, 0x1c, 0xf0, 0xe7, 0xcf, 0x69, 0x19, 0xa8, 0x07, 0xc2, 0xde, 0xd1, 0xa3, 0xf3, 0x81,
	0x57, 0x3d, 0x1d, 0x5e, 0x48, 0x04, 0xf5, 0x7e, 0x3e, 0x0e, 0xa9, 0x24, 0xc7, 0xde, 0x13, 0xce,
	0xf2, 0xd5, 0x71, 0x35, 0x89, 0x20, 0x0c, 0x9b, 0xe5, 0xef, 0xd5, 0xaa, 0x22, 0x2a, 0xc7, 0x92,
	0x66, 0x84, 0xe5, 0x2c, 0x4f, 0x96, 0x1d, 0xdb, 0xff, 0xd3, 0xd1, 0x24, 0x82, 0x30, 0x6c, 0x96,
	0x17, 0x8e, 0x4f, 0xc0, 0x46, 0x26, 0x12, 0xfb, 0xba, 0x36, 0xb8, 0x6b, 0x9e, 0xe0, 0xbe, 0x48,
	0xd4, 0x8c, 0xf9, 0xb0, 0x36, 0x01, 0xcd, 0x54, 0x20, 0xac, 0xd8, 0xfe, 0x17, 0x6f, 0xce, 0x1c,
	0xeb, 0xed, 0x99, 0x63, 0xfd, 0x7d, 0xe6, 0x58, 0xbf, 0x9d, 0x3b, 0xad, 0xb7, 0xe7, 0x4e, 0xeb,
	0xaf, 0x73, 0xa7, 0xf5, 0xe3, 0x47, 0x09, 0x93, 0x83, 0x61, 0xe8, 0x45, 0x3c, 0xeb, 0x2d, 0xb4,
	0x7b, 0x8d, 0x76, 0x4f, 0x4e, 0x0a, 0x2a, 0xc2, 0x6d, 0xfd, 0xe6, 0x7e, 0xf6, 0x6f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x84, 0x71, 0xf7, 0xc2, 0xe4, 0x07, 0x00, 0x00,
}

func (m *LiquidityPoolRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPoolRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPoolRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchPoolSwapMsgs) > 0 {
		for iNdEx := len(m.BatchPoolSwapMsgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchPoolSwapMsgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BatchPoolWithdrawMsgs) > 0 {
		for iNdEx := len(m.BatchPoolWithdrawMsgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchPoolWithdrawMsgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BatchPoolDepositMsgs) > 0 {
		for iNdEx := len(m.BatchPoolDepositMsgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchPoolDepositMsgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.BatchPoolSwapMsgRecords) > 0 {
		for iNdEx := len(m.BatchPoolSwapMsgRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchPoolSwapMsgRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.LiquidityPoolBatch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.LiquidityPoolMetaData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.LiquidityPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiquidityPoolRecords) > 0 {
		for iNdEx := len(m.LiquidityPoolRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidityPoolRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BatchPoolSwapMsgRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchPoolSwapMsgRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchPoolSwapMsgRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.RemainingOfferCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.ExchangedOfferCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.OrderExpiryHeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OrderExpiryHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.ToDelete {
		i--
		if m.ToDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Succeed {
		i--
		if m.Succeed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Executed {
		i--
		if m.Executed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MsgIndex != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MsgIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgHeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MsgHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LiquidityPoolRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LiquidityPool.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.LiquidityPoolMetaData.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.LiquidityPoolBatch.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.BatchPoolSwapMsgRecords) > 0 {
		for _, e := range m.BatchPoolSwapMsgRecords {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BatchPoolDepositMsgs) > 0 {
		for _, e := range m.BatchPoolDepositMsgs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BatchPoolWithdrawMsgs) > 0 {
		for _, e := range m.BatchPoolWithdrawMsgs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BatchPoolSwapMsgs) > 0 {
		for _, e := range m.BatchPoolSwapMsgs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.LiquidityPoolRecords) > 0 {
		for _, e := range m.LiquidityPoolRecords {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *BatchPoolSwapMsgRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgHeight != 0 {
		n += 1 + sovGenesis(uint64(m.MsgHeight))
	}
	if m.MsgIndex != 0 {
		n += 1 + sovGenesis(uint64(m.MsgIndex))
	}
	if m.Executed {
		n += 2
	}
	if m.Succeed {
		n += 2
	}
	if m.ToDelete {
		n += 2
	}
	if m.OrderExpiryHeight != 0 {
		n += 1 + sovGenesis(uint64(m.OrderExpiryHeight))
	}
	l = m.ExchangedOfferCoin.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.RemainingOfferCoin.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.Msg.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LiquidityPoolRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPoolRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPoolRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidityPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityPoolMetaData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidityPoolMetaData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityPoolBatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidityPoolBatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchPoolSwapMsgRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchPoolSwapMsgRecords = append(m.BatchPoolSwapMsgRecords, BatchPoolSwapMsgRecord{})
			if err := m.BatchPoolSwapMsgRecords[len(m.BatchPoolSwapMsgRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchPoolDepositMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchPoolDepositMsgs = append(m.BatchPoolDepositMsgs, BatchPoolDepositMsg{})
			if err := m.BatchPoolDepositMsgs[len(m.BatchPoolDepositMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchPoolWithdrawMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchPoolWithdrawMsgs = append(m.BatchPoolWithdrawMsgs, BatchPoolWithdrawMsg{})
			if err := m.BatchPoolWithdrawMsgs[len(m.BatchPoolWithdrawMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchPoolSwapMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchPoolSwapMsgs = append(m.BatchPoolSwapMsgs, BatchPoolSwapMsg{})
			if err := m.BatchPoolSwapMsgs[len(m.BatchPoolSwapMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityPoolRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityPoolRecords = append(m.LiquidityPoolRecords, LiquidityPoolRecord{})
			if err := m.LiquidityPoolRecords[len(m.LiquidityPoolRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchPoolSwapMsgRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchPoolSwapMsgRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchPoolSwapMsgRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
			}
			m.MsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIndex", wireType)
			}
			m.MsgIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Executed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeed = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToDelete = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderExpiryHeight", wireType)
			}
			m.OrderExpiryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderExpiryHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedOfferCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangedOfferCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingOfferCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingOfferCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
