// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tx.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateLiquidityPool struct {
	PoolCreator         github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=pool_creator,json=poolCreator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"pool_creator,omitempty" yaml:"pool_creator"`
	PoolTypeIndex       uint32                                        `protobuf:"varint,2,opt,name=pool_type_index,json=poolTypeIndex,proto3" json:"pool_type_index,omitempty" yaml:"pool_type_index"`
	ReserveTokenDenoms  []string                                      `protobuf:"bytes,3,rep,name=reserve_token_denoms,json=reserveTokenDenoms,proto3" json:"reserve_token_denoms,omitempty" yaml:"reserve_token_denoms"`
	DepositTokensAmount []types.Coin                                  `protobuf:"bytes,4,rep,name=deposit_tokens_amount,json=depositTokensAmount,proto3" json:"deposit_tokens_amount" yaml:"deposit_tokens_amount"`
}

func (m *MsgCreateLiquidityPool) Reset()         { *m = MsgCreateLiquidityPool{} }
func (m *MsgCreateLiquidityPool) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLiquidityPool) ProtoMessage()    {}
func (*MsgCreateLiquidityPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{0}
}
func (m *MsgCreateLiquidityPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLiquidityPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLiquidityPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLiquidityPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLiquidityPool.Merge(m, src)
}
func (m *MsgCreateLiquidityPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLiquidityPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLiquidityPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLiquidityPool proto.InternalMessageInfo

type MsgDepositToLiquidityPool struct {
	Depositor           github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=depositor,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"depositor,omitempty" yaml:"depositor"`
	PoolID              uint64                                        `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id" yaml:"pool_id"`
	DepositTokensAmount []types.Coin                                  `protobuf:"bytes,3,rep,name=deposit_tokens_amount,json=depositTokensAmount,proto3" json:"deposit_tokens_amount" yaml:"deposit_tokens_amount"`
}

func (m *MsgDepositToLiquidityPool) Reset()         { *m = MsgDepositToLiquidityPool{} }
func (m *MsgDepositToLiquidityPool) String() string { return proto.CompactTextString(m) }
func (*MsgDepositToLiquidityPool) ProtoMessage()    {}
func (*MsgDepositToLiquidityPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{1}
}
func (m *MsgDepositToLiquidityPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositToLiquidityPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositToLiquidityPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositToLiquidityPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositToLiquidityPool.Merge(m, src)
}
func (m *MsgDepositToLiquidityPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositToLiquidityPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositToLiquidityPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositToLiquidityPool proto.InternalMessageInfo

type MsgWithdrawFromLiquidityPool struct {
	Withdrawer      github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=withdrawer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"withdrawer,omitempty" yaml:"withdrawer"`
	PoolID          uint64                                        `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id" yaml:"pool_id"`
	PoolTokenAmount []types.Coin                                  `protobuf:"bytes,3,rep,name=pool_token_amount,json=poolTokenAmount,proto3" json:"pool_token_amount" yaml:"pool_token_amount"`
}

func (m *MsgWithdrawFromLiquidityPool) Reset()         { *m = MsgWithdrawFromLiquidityPool{} }
func (m *MsgWithdrawFromLiquidityPool) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawFromLiquidityPool) ProtoMessage()    {}
func (*MsgWithdrawFromLiquidityPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{2}
}
func (m *MsgWithdrawFromLiquidityPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawFromLiquidityPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawFromLiquidityPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawFromLiquidityPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawFromLiquidityPool.Merge(m, src)
}
func (m *MsgWithdrawFromLiquidityPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawFromLiquidityPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawFromLiquidityPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawFromLiquidityPool proto.InternalMessageInfo

type MsgSwap struct {
	SwapRequester github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=swap_requester,json=swapRequester,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"swap_requester,omitempty" yaml:"swap_requester"`
	PoolID        uint64                                        `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id" yaml:"pool_id"`
	PoolTypeIndex uint32                                        `protobuf:"varint,3,opt,name=pool_type_index,json=poolTypeIndex,proto3" json:"pool_type_index,omitempty" yaml:"pool_type_index"`
	SwapType      uint32                                        `protobuf:"varint,4,opt,name=swap_type,json=swapType,proto3" json:"swap_type,omitempty" yaml:"swap_type"`
	OfferToken    types.Coin                                    `protobuf:"bytes,5,opt,name=offer_token,json=offerToken,proto3" json:"offer_token" yaml:"offer_token"`
	DemandToken   types.Coin                                    `protobuf:"bytes,6,opt,name=demand_token,json=demandToken,proto3" json:"demand_token" yaml:"demand_token"`
	OrderPrice    github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,7,opt,name=order_price,json=orderPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"order_price" yaml:"order_price"`
}

func (m *MsgSwap) Reset()         { *m = MsgSwap{} }
func (m *MsgSwap) String() string { return proto.CompactTextString(m) }
func (*MsgSwap) ProtoMessage()    {}
func (*MsgSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{3}
}
func (m *MsgSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwap.Merge(m, src)
}
func (m *MsgSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwap proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateLiquidityPool)(nil), "cosmos.gov.v1beta1.MsgCreateLiquidityPool")
	proto.RegisterType((*MsgDepositToLiquidityPool)(nil), "cosmos.gov.v1beta1.MsgDepositToLiquidityPool")
	proto.RegisterType((*MsgWithdrawFromLiquidityPool)(nil), "cosmos.gov.v1beta1.MsgWithdrawFromLiquidityPool")
	proto.RegisterType((*MsgSwap)(nil), "cosmos.gov.v1beta1.MsgSwap")
}

func init() { proto.RegisterFile("tx.proto", fileDescriptor_0fd2153dc07d3b5c) }

var fileDescriptor_0fd2153dc07d3b5c = []byte{
	// 723 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x4d, 0x4f, 0xdb, 0x4a,
	0x14, 0x8d, 0x49, 0x5e, 0x80, 0x09, 0xf0, 0x1e, 0xe6, 0xe3, 0x99, 0x80, 0x32, 0x91, 0xd5, 0x8f,
	0x6c, 0x48, 0x44, 0xbb, 0x63, 0x55, 0x92, 0x14, 0x95, 0xaa, 0x91, 0xa8, 0x8b, 0x5a, 0xb5, 0x1b,
	0xcb, 0xf1, 0x0c, 0xc6, 0x22, 0xf6, 0x18, 0xcf, 0x84, 0x90, 0x7f, 0xd1, 0x5d, 0xb7, 0xfd, 0x17,
	0x5d, 0x75, 0xcf, 0x92, 0x4d, 0xa5, 0xaa, 0x0b, 0xab, 0x0d, 0x9b, 0xaa, 0x4b, 0x2f, 0xbb, 0xaa,
	0x66, 0xc6, 0x21, 0x8e, 0x44, 0x5b, 0x8a, 0xe8, 0x2a, 0x73, 0xef, 0xb9, 0xf7, 0x5c, 0xcd, 0x39,
	0x73, 0x1d, 0x30, 0xc5, 0x4e, 0xaa, 0x41, 0x48, 0x18, 0x51, 0x55, 0x9b, 0x50, 0x8f, 0xd0, 0xaa,
	0x43, 0x8e, 0xab, 0xc7, 0x1b, 0x6d, 0xcc, 0xac, 0x8d, 0xe2, 0xa2, 0x43, 0x1c, 0x22, 0xe0, 0x1a,
	0x3f, 0xc9, 0xca, 0xe2, 0xff, 0xb2, 0xd2, 0x94, 0x80, 0x4d, 0x5c, 0x5f, 0x02, 0xfa, 0x9b, 0x2c,
	0x58, 0x6e, 0x51, 0xa7, 0x11, 0x62, 0x8b, 0xe1, 0x27, 0xee, 0x51, 0xd7, 0x45, 0x2e, 0xeb, 0xef,
	0x12, 0xd2, 0x51, 0x0f, 0xc1, 0x4c, 0x40, 0x48, 0xc7, 0xb4, 0x39, 0x46, 0x42, 0x4d, 0x29, 0x2b,
	0x95, 0x99, 0xfa, 0xa3, 0x38, 0x82, 0x0b, 0x7d, 0xcb, 0xeb, 0x6c, 0xea, 0x69, 0x54, 0xff, 0x1e,
	0xc1, 0x75, 0xc7, 0x65, 0x07, 0xdd, 0x76, 0xd5, 0x26, 0x5e, 0x4d, 0xce, 0x4b, 0x7e, 0xd6, 0x29,
	0x3a, 0xac, 0xb1, 0x7e, 0x80, 0x69, 0x75, 0xcb, 0xb6, 0xb7, 0x10, 0x0a, 0x31, 0xa5, 0x46, 0x81,
	0xf7, 0x37, 0x64, 0xbb, 0x5a, 0x07, 0xff, 0x0a, 0x3a, 0x5e, 0x65, 0xba, 0x3e, 0xc2, 0x27, 0xda,
	0x44, 0x59, 0xa9, 0xcc, 0xd6, 0x8b, 0x71, 0x04, 0x97, 0x53, 0xf3, 0x46, 0x05, 0xba, 0x31, 0xcb,
	0x33, 0x7b, 0xfd, 0x00, 0xef, 0xf0, 0x58, 0x7d, 0x0a, 0x16, 0x43, 0x4c, 0x71, 0x78, 0x8c, 0x4d,
	0x46, 0x0e, 0xb1, 0x6f, 0x22, 0xec, 0x13, 0x8f, 0x6a, 0xd9, 0x72, 0xb6, 0x32, 0x5d, 0x87, 0x71,
	0x04, 0x57, 0x25, 0xd1, 0x65, 0x55, 0xba, 0xa1, 0x26, 0xe9, 0x3d, 0x9e, 0x6d, 0x8a, 0xa4, 0x4a,
	0xc1, 0x12, 0xc2, 0x01, 0xa1, 0x2e, 0x93, 0xc5, 0xd4, 0xb4, 0x3c, 0xd2, 0xf5, 0x99, 0x96, 0x2b,
	0x67, 0x2b, 0x85, 0x7b, 0x2b, 0xd5, 0xc4, 0x81, 0xb6, 0x45, 0xf1, 0xd0, 0x82, 0x6a, 0x83, 0xb8,
	0x7e, 0xfd, 0xd6, 0x69, 0x04, 0x33, 0x71, 0x04, 0xd7, 0xe4, 0xc8, 0x4b, 0x59, 0x74, 0x63, 0x21,
	0xc9, 0x8b, 0x99, 0x74, 0x4b, 0x64, 0x37, 0x73, 0x5f, 0xdf, 0x42, 0x45, 0x7f, 0x3f, 0x01, 0x56,
	0x5a, 0xd4, 0x69, 0x0e, 0x0b, 0xc6, 0xcd, 0xb1, 0xc1, 0x74, 0xd2, 0x7a, 0xe1, 0xcc, 0xc3, 0x38,
	0x82, 0xff, 0x8d, 0x4d, 0xbb, 0x96, 0x2d, 0x23, 0x5e, 0xf5, 0x01, 0x98, 0x14, 0x9a, 0xbb, 0x48,
	0x98, 0x91, 0xab, 0xdf, 0x1d, 0x44, 0x30, 0xcf, 0xe7, 0xef, 0x34, 0xbf, 0x45, 0x70, 0x08, 0xc6,
	0x11, 0x9c, 0x4b, 0x39, 0xe4, 0x22, 0xdd, 0xc8, 0xf3, 0xd3, 0x0e, 0xfa, 0xb9, 0x7e, 0xd9, 0xbf,
	0xae, 0xdf, 0xbb, 0x09, 0xb0, 0xd6, 0xa2, 0xce, 0x0b, 0x97, 0x1d, 0xa0, 0xd0, 0xea, 0x6d, 0x87,
	0xc4, 0x1b, 0x97, 0x70, 0x1f, 0x80, 0x5e, 0x02, 0xe2, 0xa1, 0x86, 0xdb, 0x71, 0x04, 0xe7, 0xe5,
	0xc4, 0x11, 0x76, 0x0d, 0x11, 0x53, 0xcc, 0x37, 0xa0, 0xa2, 0x03, 0xe6, 0xe5, 0xdb, 0x17, 0xef,
	0xf5, 0xaa, 0x0a, 0x96, 0x13, 0x05, 0xb5, 0xf4, 0xf6, 0xa4, 0x18, 0x74, 0x43, 0xac, 0x9c, 0x90,
	0x6e, 0x4c, 0xb9, 0x0f, 0x39, 0x30, 0xd9, 0xa2, 0xce, 0xb3, 0x9e, 0x15, 0xa8, 0x47, 0x60, 0x8e,
	0xf6, 0xac, 0xc0, 0x0c, 0xf1, 0x51, 0x17, 0x53, 0x76, 0x21, 0xd4, 0xe3, 0x38, 0x82, 0x4b, 0x92,
	0x78, 0x1c, 0xbf, 0x86, 0x58, 0xb3, 0x9c, 0xc1, 0x18, 0x12, 0xdc, 0x80, 0x5e, 0x97, 0x7c, 0x4c,
	0xb2, 0x7f, 0xfa, 0x31, 0xd9, 0x00, 0xd3, 0xe2, 0x62, 0xbc, 0x44, 0xcb, 0x89, 0xee, 0xc5, 0xd1,
	0x82, 0x5d, 0x40, 0xba, 0x31, 0xc5, 0xcf, 0xbc, 0x4f, 0x7d, 0x0e, 0x0a, 0x64, 0x7f, 0x1f, 0x87,
	0x52, 0x65, 0xed, 0x9f, 0xb2, 0xf2, 0x6b, 0x83, 0x8a, 0x89, 0x41, 0xaa, 0xe4, 0x4c, 0xf5, 0xea,
	0x06, 0x10, 0x91, 0xf0, 0x46, 0x7d, 0x09, 0x66, 0x10, 0xf6, 0x2c, 0x1f, 0x25, 0xc4, 0xf9, 0xdf,
	0x11, 0xaf, 0x26, 0xc4, 0x0b, 0xc3, 0xdd, 0x19, 0x35, 0xeb, 0x46, 0x41, 0x86, 0x92, 0x1a, 0x83,
	0x02, 0x09, 0x11, 0x0e, 0xcd, 0x20, 0x74, 0x6d, 0xac, 0x4d, 0x0a, 0x6f, 0x9b, 0xbc, 0xfd, 0x53,
	0x04, 0xef, 0x5c, 0xc1, 0xc6, 0x26, 0xb6, 0x53, 0x37, 0x18, 0x51, 0xf1, 0x1b, 0xf0, 0x68, 0x97,
	0x07, 0xf2, 0x5d, 0xd5, 0x1b, 0xa7, 0x5f, 0x4a, 0x99, 0xd3, 0x41, 0x49, 0x39, 0x1b, 0x94, 0x94,
	0xcf, 0x83, 0x92, 0xf2, 0xfa, 0xbc, 0x94, 0x39, 0x3b, 0x2f, 0x65, 0x3e, 0x9e, 0x97, 0x32, 0xaf,
	0x6e, 0xa7, 0xa6, 0x31, 0xec, 0x23, 0x1c, 0x7a, 0xae, 0xcf, 0x6a, 0x9d, 0xe1, 0xce, 0xca, 0x81,
	0xed, 0xbc, 0xf8, 0xdf, 0xba, 0xff, 0x23, 0x00, 0x00, 0xff, 0xff, 0x02, 0x9b, 0xd3, 0xef, 0x06,
	0x07, 0x00, 0x00,
}

func (this *MsgCreateLiquidityPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgCreateLiquidityPool)
	if !ok {
		that2, ok := that.(MsgCreateLiquidityPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PoolCreator, that1.PoolCreator) {
		return false
	}
	if this.PoolTypeIndex != that1.PoolTypeIndex {
		return false
	}
	if len(this.ReserveTokenDenoms) != len(that1.ReserveTokenDenoms) {
		return false
	}
	for i := range this.ReserveTokenDenoms {
		if this.ReserveTokenDenoms[i] != that1.ReserveTokenDenoms[i] {
			return false
		}
	}
	if len(this.DepositTokensAmount) != len(that1.DepositTokensAmount) {
		return false
	}
	for i := range this.DepositTokensAmount {
		if !this.DepositTokensAmount[i].Equal(&that1.DepositTokensAmount[i]) {
			return false
		}
	}
	return true
}
func (this *MsgDepositToLiquidityPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgDepositToLiquidityPool)
	if !ok {
		that2, ok := that.(MsgDepositToLiquidityPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Depositor, that1.Depositor) {
		return false
	}
	if this.PoolID != that1.PoolID {
		return false
	}
	if len(this.DepositTokensAmount) != len(that1.DepositTokensAmount) {
		return false
	}
	for i := range this.DepositTokensAmount {
		if !this.DepositTokensAmount[i].Equal(&that1.DepositTokensAmount[i]) {
			return false
		}
	}
	return true
}
func (this *MsgWithdrawFromLiquidityPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgWithdrawFromLiquidityPool)
	if !ok {
		that2, ok := that.(MsgWithdrawFromLiquidityPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Withdrawer, that1.Withdrawer) {
		return false
	}
	if this.PoolID != that1.PoolID {
		return false
	}
	if len(this.PoolTokenAmount) != len(that1.PoolTokenAmount) {
		return false
	}
	for i := range this.PoolTokenAmount {
		if !this.PoolTokenAmount[i].Equal(&that1.PoolTokenAmount[i]) {
			return false
		}
	}
	return true
}
func (this *MsgSwap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgSwap)
	if !ok {
		that2, ok := that.(MsgSwap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SwapRequester, that1.SwapRequester) {
		return false
	}
	if this.PoolID != that1.PoolID {
		return false
	}
	if this.PoolTypeIndex != that1.PoolTypeIndex {
		return false
	}
	if this.SwapType != that1.SwapType {
		return false
	}
	if !this.OfferToken.Equal(&that1.OfferToken) {
		return false
	}
	if !this.DemandToken.Equal(&that1.DemandToken) {
		return false
	}
	if !this.OrderPrice.Equal(that1.OrderPrice) {
		return false
	}
	return true
}
func (m *MsgCreateLiquidityPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLiquidityPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLiquidityPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositTokensAmount) > 0 {
		for iNdEx := len(m.DepositTokensAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositTokensAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ReserveTokenDenoms) > 0 {
		for iNdEx := len(m.ReserveTokenDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReserveTokenDenoms[iNdEx])
			copy(dAtA[i:], m.ReserveTokenDenoms[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ReserveTokenDenoms[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PoolTypeIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolTypeIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PoolCreator) > 0 {
		i -= len(m.PoolCreator)
		copy(dAtA[i:], m.PoolCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolCreator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositToLiquidityPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositToLiquidityPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositToLiquidityPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositTokensAmount) > 0 {
		for iNdEx := len(m.DepositTokensAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositTokensAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PoolID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawFromLiquidityPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawFromLiquidityPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawFromLiquidityPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolTokenAmount) > 0 {
		for iNdEx := len(m.PoolTokenAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolTokenAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PoolID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Withdrawer) > 0 {
		i -= len(m.Withdrawer)
		copy(dAtA[i:], m.Withdrawer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Withdrawer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.OrderPrice.Size()
		i -= size
		if _, err := m.OrderPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.DemandToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.OfferToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.SwapType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SwapType))
		i--
		dAtA[i] = 0x20
	}
	if m.PoolTypeIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolTypeIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SwapRequester) > 0 {
		i -= len(m.SwapRequester)
		copy(dAtA[i:], m.SwapRequester)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SwapRequester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateLiquidityPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolTypeIndex != 0 {
		n += 1 + sovTx(uint64(m.PoolTypeIndex))
	}
	if len(m.ReserveTokenDenoms) > 0 {
		for _, s := range m.ReserveTokenDenoms {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.DepositTokensAmount) > 0 {
		for _, e := range m.DepositTokensAmount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgDepositToLiquidityPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolID != 0 {
		n += 1 + sovTx(uint64(m.PoolID))
	}
	if len(m.DepositTokensAmount) > 0 {
		for _, e := range m.DepositTokensAmount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgWithdrawFromLiquidityPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Withdrawer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolID != 0 {
		n += 1 + sovTx(uint64(m.PoolID))
	}
	if len(m.PoolTokenAmount) > 0 {
		for _, e := range m.PoolTokenAmount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SwapRequester)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolID != 0 {
		n += 1 + sovTx(uint64(m.PoolID))
	}
	if m.PoolTypeIndex != 0 {
		n += 1 + sovTx(uint64(m.PoolTypeIndex))
	}
	if m.SwapType != 0 {
		n += 1 + sovTx(uint64(m.SwapType))
	}
	l = m.OfferToken.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.DemandToken.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.OrderPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateLiquidityPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLiquidityPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLiquidityPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCreator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCreator = append(m.PoolCreator[:0], dAtA[iNdEx:postIndex]...)
			if m.PoolCreator == nil {
				m.PoolCreator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolTypeIndex", wireType)
			}
			m.PoolTypeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolTypeIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveTokenDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveTokenDenoms = append(m.ReserveTokenDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositTokensAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositTokensAmount = append(m.DepositTokensAmount, types.Coin{})
			if err := m.DepositTokensAmount[len(m.DepositTokensAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositToLiquidityPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositToLiquidityPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositToLiquidityPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = append(m.Depositor[:0], dAtA[iNdEx:postIndex]...)
			if m.Depositor == nil {
				m.Depositor = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositTokensAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositTokensAmount = append(m.DepositTokensAmount, types.Coin{})
			if err := m.DepositTokensAmount[len(m.DepositTokensAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawFromLiquidityPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawFromLiquidityPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawFromLiquidityPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdrawer = append(m.Withdrawer[:0], dAtA[iNdEx:postIndex]...)
			if m.Withdrawer == nil {
				m.Withdrawer = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolTokenAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolTokenAmount = append(m.PoolTokenAmount, types.Coin{})
			if err := m.PoolTokenAmount[len(m.PoolTokenAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapRequester", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapRequester = append(m.SwapRequester[:0], dAtA[iNdEx:postIndex]...)
			if m.SwapRequester == nil {
				m.SwapRequester = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolTypeIndex", wireType)
			}
			m.PoolTypeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolTypeIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapType", wireType)
			}
			m.SwapType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OfferToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DemandToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DemandToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderPrice", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrderPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
